#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.ini
"""

import os
import configparser
from typing import Dict, Any, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from file_logger import (
        setup_logging, debug, info, success, warning, error, critical,
        config_event, log_config_summary
    )
except ImportError:
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ print
    def setup_logging(debug_mode=False, console_debug=False): pass
    def debug(message, category="DEBUG"): pass
    def info(message, category="INFO"): 
        if category in ["INFO", "SUCCESS"]: print(f"‚ÑπÔ∏è {message}")
    def success(message, category="SUCCESS"): print(f"‚úÖ {message}")
    def warning(message, category="WARNING"): print(f"‚ö†Ô∏è {message}")
    def error(message, category="ERROR", exc_info=False): print(f"‚ùå {message}")
    def critical(message, category="CRITICAL", exc_info=False): print(f"üí• {message}")
    def config_event(message): pass
    def log_config_summary(config_dict): pass

class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, config_file: str = "config.ini"):
        self.config_file = config_file
        self.config = configparser.ConfigParser()
        self.is_loaded = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.defaults = {
            'Planfix': {
                'user_id': '1',
                'filter_id': ''
            },
            'Settings': {
                'check_interval': '300',
                'notify_current': 'true',
                'notify_urgent': 'true', 
                'notify_overdue': 'true',
                'max_windows_per_category': '5',
                'max_total_windows': '10',
                'debug_mode': 'false'
            },
            'Roles': {
                'include_assignee': 'true',
                'include_assigner': 'true',
                'include_auditor': 'true'
            }
        }
    
    def load_config(self, show_diagnostics: bool = False) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
        
        Args:
            show_diagnostics: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        if show_diagnostics:
            print("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(self.config_file):
            error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_file}")
            return False
        
        try:
            self.config.read(self.config_file, encoding='utf-8')
            
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º debug_mode —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            debug_mode = self._get_bool_setting('Settings', 'debug_mode', False)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            setup_logging(debug_mode=debug_mode, console_debug=show_diagnostics)
            
            config_event(f"–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {'–≤–∫–ª—é—á–µ–Ω' if debug_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")
            config_event(f"–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {'–≤–∫–ª—é—á–µ–Ω–∞' if show_diagnostics else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self._apply_defaults()
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self._validate_config():
                return False
            
            self.is_loaded = True
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
            if debug_mode:
                config_summary = {
                    'Planfix': dict(self.config['Planfix']),
                    'Settings': dict(self.config['Settings']),
                    'Roles': dict(self.config['Roles'])
                }
                log_config_summary(config_summary)
            
            if show_diagnostics:
                self._show_config_summary_console()
            
            success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
            
        except Exception as e:
            critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", exc_info=True)
            return False
    
    def _apply_defaults(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        for section_name, section_defaults in self.defaults.items():
            if not self.config.has_section(section_name):
                self.config.add_section(section_name)
                config_event(f"–°–æ–∑–¥–∞–Ω–∞ —Å–µ–∫—Ü–∏—è [{section_name}]")
            
            for key, default_value in section_defaults.items():
                if not self.config.has_option(section_name, key):
                    self.config.set(section_name, key, default_value)
                    config_event(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {section_name}.{key} = {default_value}")
    
    def _validate_config(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_event("–ù–∞—á–∞–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        required_settings = [
            ('Planfix', 'api_token', "API —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"),
            ('Planfix', 'account_url', "URL –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        ]
        
        for section, key, error_msg in required_settings:
            value = self.config.get(section, key, fallback='').strip()
            if not value:
                error(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {error_msg}")
                return False
            config_event(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {section}.{key}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º URL
        account_url = self.config.get('Planfix', 'account_url', fallback='')
        if not account_url.endswith('/rest'):
            error("–í–∞–ª–∏–¥–∞—Ü–∏—è URL: URL –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ '/rest'")
            return False
        config_event(f"URL –≤–∞–ª–∏–¥–µ–Ω: {account_url}")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        numeric_settings = [
            ('Planfix', 'user_id'),
            ('Settings', 'check_interval'),
            ('Settings', 'max_windows_per_category'),
            ('Settings', 'max_total_windows')
        ]
        
        for section, key in numeric_settings:
            try:
                value = int(self.config.get(section, key, fallback='0'))
                if value <= 0:
                    error(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {section}.{key} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                    return False
                config_event(f"–ß–∏—Å–ª–æ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–∞–ª–∏–¥–µ–Ω: {section}.{key} = {value}")
            except ValueError:
                error(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {section}.{key} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                return False
        
        config_event("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    
    def _show_config_summary_console(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        print("\nüìã –°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print("=" * 50)
        
        # Planfix –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω)
        api_token = self.config.get('Planfix', 'api_token', fallback='')
        masked_token = f"{api_token[:8]}...{api_token[-4:]}" if len(api_token) > 12 else "***"
        
        print(f"üåê Planfix:")
        print(f"   API Token: {masked_token}")
        print(f"   Account URL: {self.config.get('Planfix', 'account_url', fallback='')}")
        print(f"   User ID: {self.config.get('Planfix', 'user_id', fallback='')}")
        print(f"   Filter ID: {self.config.get('Planfix', 'filter_id', fallback='–ù–ï –ó–ê–î–ê–ù')}")
        
        print(f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.config.get('Settings', 'check_interval', fallback='')} —Å–µ–∫")
        print(f"   –ú–∞–∫—Å. –æ–∫–æ–Ω –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {self.config.get('Settings', 'max_windows_per_category', fallback='')}")
        print(f"   –ú–∞–∫—Å. –æ–∫–æ–Ω –≤—Å–µ–≥–æ: {self.config.get('Settings', 'max_total_windows', fallback='')}")
        print(f"   –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {self.config.get('Settings', 'debug_mode', fallback='')}")
        
        print(f"\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        print(f"   –¢–µ–∫—É—â–∏–µ: {self.config.get('Settings', 'notify_current', fallback='')}")
        print(f"   –°—Ä–æ—á–Ω—ã–µ: {self.config.get('Settings', 'notify_urgent', fallback='')}")
        print(f"   –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ: {self.config.get('Settings', 'notify_overdue', fallback='')}")
        
        print("=" * 50)
    
    def get_planfix_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Planfix"""
        if not self.is_loaded:
            error("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Planfix –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            raise RuntimeError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        config = {
            'api_token': self.config.get('Planfix', 'api_token'),
            'account_url': self.config.get('Planfix', 'account_url'),
            'user_id': self.config.getint('Planfix', 'user_id'),
            'filter_id': self.config.get('Planfix', 'filter_id') or None
        }
        
        config_event("–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Planfix")
        return config
    
    def get_app_settings(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.is_loaded:
            error("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            raise RuntimeError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        settings = {
            'check_interval': self.config.getint('Settings', 'check_interval'),
            'max_windows_per_category': self.config.getint('Settings', 'max_windows_per_category'),
            'max_total_windows': self.config.getint('Settings', 'max_total_windows'),
            'debug_mode': self.config.getboolean('Settings', 'debug_mode'),
            'notifications': {
                'current': self.config.getboolean('Settings', 'notify_current'),
                'urgent': self.config.getboolean('Settings', 'notify_urgent'),
                'overdue': self.config.getboolean('Settings', 'notify_overdue')
            }
        }
        
        config_event("–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return settings
    
    def get_role_settings(self) -> Dict[str, bool]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π"""
        if not self.is_loaded:
            error("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            raise RuntimeError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        roles = {
            'include_assignee': self.config.getboolean('Roles', 'include_assignee'),
            'include_assigner': self.config.getboolean('Roles', 'include_assigner'),
            'include_auditor': self.config.getboolean('Roles', 'include_auditor')
        }
        
        config_event("–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π")
        return roles
    
    def _get_bool_setting(self, section: str, key: str, default: bool = False) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç boolean –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        try:
            value = self.config.getboolean(section, key)
            debug(f"–ü–æ–ª—É—á–µ–Ω–∞ boolean –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {section}.{key} = {value}")
            return value
        except Exception as e:
            warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è boolean –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {section}.{key}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
            debug(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}")
            return default
    
    def create_sample_config(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_event("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        sample_content = """[Planfix]
# API —Ç–æ–∫–µ–Ω Planfix (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
api_token = YOUR_API_TOKEN_HERE

# URL –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Planfix —Å /rest –Ω–∞ –∫–æ–Ω—Ü–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) 
account_url = https://your-account.planfix.com/rest

# ID –≥–æ—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –∑–∞–¥–∞—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
filter_id = 

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
user_id = 1

[Settings]
# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 = 5 –º–∏–Ω—É—Ç)
check_interval = 300

# –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
notify_current = true
notify_urgent = true
notify_overdue = true

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
max_windows_per_category = 5
max_total_windows = 10

# –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - –µ—Å–ª–∏ true, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª—ã
# –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
debug_mode = false

[Roles]
# –í–∫–ª—é—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
include_assignee = true

# –í–∫–ª—é—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–º
include_assigner = true

# –í–∫–ª—é—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º
include_auditor = true
"""
        
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                f.write(sample_content)
            success(f"–°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_file}")
            config_event(f"–ó–∞–ø–∏—Å–∞–Ω —Ñ–∞–π–ª –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {os.path.abspath(self.config_file)}")
            return True
        except Exception as e:
            error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–£–õ–Ø =====

def test_config_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConfigManager —Å —Ñ–∞–π–ª–æ–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    print("=" * 60)
    
    manager = ConfigManager()
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
    print("\n–¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞")
    if not manager.load_config(show_diagnostics=True):
        print("‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª")
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n–¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    if manager.create_sample_config():
        print("‚úì –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        print("\n–¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)")
        if manager.load_config(show_diagnostics=True):
            print("‚úó –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫–∏, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        else:
            print("‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏")
    
    from file_logger import get_logs_directory
    print(f"\nüìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {get_logs_directory()}")
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤!")

if __name__ == "__main__":
    test_config_manager()