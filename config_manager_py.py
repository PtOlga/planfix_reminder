#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Planfix Reminder
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É, –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

from pathlib import Path
import configparser
from typing import Dict, Any, Optional
import os

class ConfigManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.config_data = {
            'check_interval': 300,
            'max_windows_per_category': 5,
            'max_total_windows': 10,
            'notifications': {
                'current': True,
                'urgent': True,
                'overdue': True
            },
            'roles': {
                'include_assignee': True,
                'include_assigner': True,
                'include_auditor': True
            },
            'planfix': {
                'api_token': '',
                'account_url': '',
                'filter_id': None,
                'user_id': '1'
            }
        }
        self._config_loaded = False
        
    def load_config(self, show_diagnostics: bool = True) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.ini
        
        Args:
            show_diagnostics: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if show_diagnostics:
            print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê –ö–û–ù–§–ò–ì–ê ===")
        
        config_file_path = self._find_config_file(show_diagnostics)
        if not config_file_path:
            return False
        
        success = self._parse_config_file(config_file_path, show_diagnostics)
        if success:
            self._config_loaded = True
            
        return success
    
    def _find_config_file(self, show_diagnostics: bool) -> Optional[Path]:
        """–ò—â–µ—Ç —Ñ–∞–π–ª config.ini –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"""
        script_dir = Path(__file__).parent.absolute()
        current_dir = Path.cwd()
        
        if show_diagnostics:
            print(f"–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
            print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {script_dir}")
            print()
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        config_paths = [
            current_dir / 'config.ini',
            script_dir / 'config.ini',
            Path('config.ini'),
        ]
        
        # –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        for i, path in enumerate(config_paths, 1):
            if show_diagnostics:
                print(f"üîç –ü—É—Ç—å {i}: {path}")
                print(f"   –ê–±—Å–æ–ª—é—Ç–Ω—ã–π: {path.absolute()}")
                print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {path.exists()}")
            
            if path.exists():
                try:
                    size = path.stat().st_size
                    if show_diagnostics:
                        print(f"   ‚úÖ –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
                    return path
                except Exception as e:
                    if show_diagnostics:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
            else:
                if show_diagnostics:
                    print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if show_diagnostics:
                print()
        
        # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        if show_diagnostics:
            print("üö® –§–ê–ô–õ CONFIG.INI –ù–ï –ù–ê–ô–î–ï–ù!")
            self._show_directory_contents(current_dir, script_dir)
        
        return None
    
    def _parse_config_file(self, config_path: Path, show_diagnostics: bool) -> bool:
        """–ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏"""
        if show_diagnostics:
            print(f"‚úÖ –ù–ê–ô–î–ï–ù CONFIG.INI: {config_path}")
        
        config = configparser.ConfigParser()
        encodings_to_try = ['utf-8', 'cp1251', 'windows-1251', 'latin-1']
        
        for encoding in encodings_to_try:
            try:
                if show_diagnostics:
                    print(f"–ü—Ä–æ–±—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É: {encoding}")
                
                config.read(str(config_path), encoding=encoding)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if not self._validate_config_structure(config, show_diagnostics):
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if not self._validate_required_fields(config, show_diagnostics):
                    continue
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self._load_settings_from_config(config)
                
                if show_diagnostics:
                    print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}")
                    self._show_loaded_settings()
                
                return True
                
            except Exception as e:
                if show_diagnostics:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
                continue
        
        if show_diagnostics:
            print("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ì–†–£–ó–ò–¢–¨ –ö–û–ù–§–ò–ì!")
        return False
    
    def _validate_config_structure(self, config: configparser.ConfigParser, show_diagnostics: bool) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω—Ñ–∏–≥–∞"""
        sections = config.sections()
        
        if show_diagnostics:
            print(f"  –ù–∞–π–¥–µ–Ω—ã —Å–µ–∫—Ü–∏–∏: {sections}")
        
        if 'Planfix' not in sections:
            if show_diagnostics:
                print(f"  ‚ùå –°–µ–∫—Ü–∏—è [Planfix] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        return True
    
    def _validate_required_fields(self, config: configparser.ConfigParser, show_diagnostics: bool) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"""
        api_token = config.get('Planfix', 'api_token', fallback='')
        account_url = config.get('Planfix', 'account_url', fallback='')
        
        if show_diagnostics:
            print(f"  API Token: {'***' + api_token[-4:] if len(api_token) > 4 else '–ù–ï –ó–ê–î–ê–ù'}")
            print(f"  Account URL: {account_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
        if not api_token or api_token in ['–í–ê–®_API_–¢–û–ö–ï–ù', 'YOUR_API_TOKEN', 'YOUR_API_TOKEN_HERE']:
            if show_diagnostics:
                print(f"  ‚ùå API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
        if not account_url.endswith('/rest'):
            if show_diagnostics:
                print(f"  ‚ùå URL –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ /rest")
            return False
        
        return True
    
    def _load_settings_from_config(self, config: configparser.ConfigParser):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ ConfigParser"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Planfix
        self.config_data['planfix']['api_token'] = config['Planfix']['api_token']
        self.config_data['planfix']['account_url'] = config['Planfix']['account_url']
        self.config_data['planfix']['filter_id'] = config.get('Planfix', 'filter_id', fallback=None)
        self.config_data['planfix']['user_id'] = config.get('Planfix', 'user_id', fallback='1')
        
        # –û—á–∏—â–∞–µ–º filter_id –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
        if self.config_data['planfix']['filter_id'] == '':
            self.config_data['planfix']['filter_id'] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if config.has_section('Settings'):
            self.config_data['check_interval'] = int(config.get('Settings', 'check_interval', fallback=300))
            self.config_data['max_windows_per_category'] = int(config.get('Settings', 'max_windows_per_category', fallback=5))
            self.config_data['max_total_windows'] = int(config.get('Settings', 'max_total_windows', fallback=10))
            
            self.config_data['notifications']['current'] = config.getboolean('Settings', 'notify_current', fallback=True)
            self.config_data['notifications']['urgent'] = config.getboolean('Settings', 'notify_urgent', fallback=True)
            self.config_data['notifications']['overdue'] = config.getboolean('Settings', 'notify_overdue', fallback=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π
        if config.has_section('Roles'):
            self.config_data['roles']['include_assignee'] = config.getboolean('Roles', 'include_assignee', fallback=True)
            self.config_data['roles']['include_assigner'] = config.getboolean('Roles', 'include_assigner', fallback=True)
            self.config_data['roles']['include_auditor'] = config.getboolean('Roles', 'include_auditor', fallback=True)
    
    def _show_loaded_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print(f"   Filter ID: {self.config_data['planfix']['filter_id'] or '–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø'}")
        print(f"   User ID: {self.config_data['planfix']['user_id']}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.config_data['check_interval']} —Å–µ–∫")
        print("=" * 35)
    
    def _show_directory_contents(self, current_dir: Path, script_dir: Path):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print(f"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ({current_dir}):")
        try:
            for item in sorted(current_dir.iterdir()):
                if item.is_file():
                    print(f"   üìÑ {item.name}")
                else:
                    print(f"   üìÅ {item.name}/")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        
        if current_dir != script_dir:
            print(f"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ ({script_dir}):")
            try:
                for item in sorted(script_dir.iterdir()):
                    if item.is_file():
                        print(f"   üìÑ {item.name}")
                    else:
                        print(f"   üìÅ {item.name}/")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    # ===== –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    def is_loaded(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
        return self._config_loaded
    
    def get_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if not self._config_loaded:
            raise RuntimeError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ load_config() —Å–Ω–∞—á–∞–ª–∞.")
        return self.config_data.copy()
    
    def get_planfix_config(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Planfix API"""
        if not self._config_loaded:
            raise RuntimeError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return self.config_data['planfix'].copy()
    
    def get_app_settings(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self._config_loaded:
            raise RuntimeError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return {
            'check_interval': self.config_data['check_interval'],
            'max_windows_per_category': self.config_data['max_windows_per_category'],
            'max_total_windows': self.config_data['max_total_windows'],
            'notifications': self.config_data['notifications'].copy(),
            'roles': self.config_data['roles'].copy()
        }
    
    def get_notification_settings(self) -> Dict[str, bool]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self._config_loaded:
            raise RuntimeError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return self.config_data['notifications'].copy()
    
    def get_role_settings(self) -> Dict[str, bool]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π"""
        if not self._config_loaded:
            raise RuntimeError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return self.config_data['roles'].copy()
    
    def create_sample_config(self, filepath: str = 'config.ini') -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        
        Args:
            filepath: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
        """
        sample_config = """[Planfix]
# –í–∞—à API —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Planfix
api_token = –í–ê–®_API_–¢–û–ö–ï–ù_–ó–î–ï–°–¨

# URL –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å /rest –Ω–∞ –∫–æ–Ω—Ü–µ!)
account_url = https://–≤–∞—à-–∞–∫–∫–∞—É–Ω—Ç.planfix.com/rest

# ID –≥–æ—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
filter_id = 

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞)
user_id = 1

[Settings]
# –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (300 = 5 –º–∏–Ω—É—Ç)
check_interval = 300

# –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
notify_current = true
notify_urgent = true
notify_overdue = true

# –õ–∏–º–∏—Ç—ã –æ–∫–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
max_windows_per_category = 5
max_total_windows = 10

[Roles]
# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥–¥–µ —è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
include_assignee = true

# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥–¥–µ —è –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫
include_assigner = true

# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≥–¥–µ —è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä/—É—á–∞—Å—Ç–Ω–∏–∫
include_auditor = true
"""
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(sample_config)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä config.ini: {filepath}")
            print("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è config.ini: {e}")
            return False

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–£–õ–Ø =====

def test_config_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ConfigManager"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConfigManager")
    print("=" * 40)
    
    config_manager = ConfigManager()
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞...")
    success = config_manager.load_config(show_diagnostics=True)
    
    if success:
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        try:
            planfix_config = config_manager.get_planfix_config()
            app_settings = config_manager.get_app_settings()
            
            print(f"‚úÖ Planfix –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {planfix_config}")
            print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {app_settings}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    else:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞
        print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ config.ini...")
        config_manager.create_sample_config('config_sample.ini')

if __name__ == "__main__":
    test_config_manager()