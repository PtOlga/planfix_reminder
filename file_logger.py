#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import os
import sys
import logging
import datetime
from pathlib import Path
from typing import Optional
from logging.handlers import RotatingFileHandler
import traceback

class FileLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª—ã —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.debug_enabled = False
        self.console_debug = False
        self.logs_dir: Optional[Path] = None
        self.main_logger: Optional[logging.Logger] = None
        self.error_logger: Optional[logging.Logger] = None
        self.api_logger: Optional[logging.Logger] = None
        self.setup_complete = False
    
    def setup_logging(self, debug_mode: bool = False, console_debug: bool = False):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            debug_mode: –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª—ã
            console_debug: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
        """
        self.debug_enabled = debug_mode
        self.console_debug = console_debug
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
            self.logs_dir = self._create_logs_directory()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã
            self._setup_main_logger()
            self._setup_error_logger()
            self._setup_api_logger()
            
            self.setup_complete = True
            
            if debug_mode:
                self.info("üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª—ã")
            else:
                self.info("üìù –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è")
            
            if console_debug:
                print(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {self.logs_dir}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")
            self.setup_complete = False
    
    def _create_logs_directory(self) -> Path:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç—É
            if getattr(sys, 'frozen', False):
                # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ exe —Ñ–∞–π–ª
                app_dir = Path(sys.executable).parent
            else:
                # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ Python —Å–∫—Ä–∏–ø—Ç
                app_dir = Path(__file__).parent

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs —Ä—è–¥–æ–º —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
            logs_dir = app_dir / "logs"
            logs_dir.mkdir(parents=True, exist_ok=True)

            return logs_dir

        except Exception as e:
            # Fallback: –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä—è–¥–æ–º —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º,
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            import tempfile
            logs_dir = Path(tempfile.gettempdir()) / "PlanfixReminder_logs"
            logs_dir.mkdir(parents=True, exist_ok=True)
            print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤: {logs_dir}")
            return logs_dir
    
    def _setup_main_logger(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä"""
        self.main_logger = logging.getLogger('PlanfixReminder.Main')
        self.main_logger.setLevel(logging.DEBUG if self.debug_enabled else logging.INFO)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.main_logger.handlers.clear()
        
        # –§–∞–π–ª –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–æ–≤ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        main_log_file = self.logs_dir / "planfix_reminder.log"
        main_handler = RotatingFileHandler(
            main_log_file,
            maxBytes=5*1024*1024,  # 5 MB
            backupCount=5,
            encoding='utf-8'
        )
        
        # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–æ–≤
        main_formatter = logging.Formatter(
            '%(asctime)s | %(levelname)-8s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        main_handler.setFormatter(main_formatter)
        self.main_logger.addHandler(main_handler)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
        if self.console_debug:
            console_handler = logging.StreamHandler()
            console_handler.setFormatter(main_formatter)
            self.main_logger.addHandler(console_handler)
    
    def _setup_error_logger(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫"""
        self.error_logger = logging.getLogger('PlanfixReminder.Errors')
        self.error_logger.setLevel(logging.WARNING)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.error_logger.handlers.clear()
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
        error_log_file = self.logs_dir / "errors.log"
        error_handler = RotatingFileHandler(
            error_log_file,
            maxBytes=2*1024*1024,  # 2 MB
            backupCount=3,
            encoding='utf-8'
        )
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—à–∏–±–æ–∫
        error_formatter = logging.Formatter(
            '%(asctime)s | %(levelname)-8s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        error_handler.setFormatter(error_formatter)
        self.error_logger.addHandler(error_handler)
    
    def _setup_api_logger(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è API –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.api_logger = logging.getLogger('PlanfixReminder.API')
        self.api_logger.setLevel(logging.DEBUG if self.debug_enabled else logging.INFO)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.api_logger.handlers.clear()
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è API –ª–æ–≥–æ–≤
        api_log_file = self.logs_dir / "api_operations.log"
        api_handler = RotatingFileHandler(
            api_log_file,
            maxBytes=3*1024*1024,  # 3 MB
            backupCount=3,
            encoding='utf-8'
        )
        
        # –§–æ—Ä–º–∞—Ç –¥–ª—è API –ª–æ–≥–æ–≤
        api_formatter = logging.Formatter(
            '%(asctime)s | %(levelname)-8s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        api_handler.setFormatter(api_formatter)
        self.api_logger.addHandler(api_handler)
    
    def _log_to_console_if_needed(self, level: str, message: str):
        """–í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if self.console_debug:
            return  # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ handler
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if level in ['ERROR', 'CRITICAL', 'STARTUP', 'USER_ACTION', 'WARNING']:
            print(message)
    
    # ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
    
    def debug(self, message: str, category: str = "DEBUG"):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª—ã –ø—Ä–∏ debug_mode=True"""
        if not self.setup_complete:
            return
        
        if self.debug_enabled:
            self.main_logger.debug(f"{category} | {message}")
    
    def info(self, message: str, category: str = "INFO"):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.setup_complete:
            return
        
        self.main_logger.info(f"{category} | {message}")
    
    def success(self, message: str, category: str = "SUCCESS"):
        """–°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
        if not self.setup_complete:
            return
        
        self.main_logger.info(f"{category} | {message}")
    
    def warning(self, message: str, category: str = "WARNING"):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è"""
        full_message = f"‚ö†Ô∏è {message}"
        
        if not self.setup_complete:
            print(full_message)
            return
        
        self.main_logger.warning(f"{category} | {message}")
        self.error_logger.warning(f"{category} | {message}")
        self._log_to_console_if_needed("WARNING", full_message)
    
    def error(self, message: str, category: str = "ERROR", exc_info: bool = False):
        """–û—à–∏–±–∫–∏ - –≤—Å–µ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è"""
        full_message = f"‚ùå {message}"
        
        if not self.setup_complete:
            print(full_message)
            return
        
        log_message = f"{category} | {message}"
        
        self.main_logger.error(log_message, exc_info=exc_info)
        self.error_logger.error(log_message, exc_info=exc_info)
        self._log_to_console_if_needed("ERROR", full_message)
    
    def critical(self, message: str, category: str = "CRITICAL", exc_info: bool = False):
        """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –≤—Å–µ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è"""
        full_message = f"üí• {message}"
        
        if not self.setup_complete:
            print(full_message)
            return
        
        log_message = f"{category} | {message}"
        
        self.main_logger.critical(log_message, exc_info=exc_info)
        self.error_logger.critical(log_message, exc_info=exc_info)
        self._log_to_console_if_needed("CRITICAL", full_message)
    
    def startup(self, message: str):
        """–°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è"""
        full_message = f"üöÄ {message}"
        
        if not self.setup_complete:
            print(full_message)
            return
        
        self.main_logger.info(f"STARTUP | {message}")
        self._log_to_console_if_needed("STARTUP", full_message)
    
    def user_action(self, message: str):
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—Å–µ–≥–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è"""
        full_message = f"üë§ {message}"
        
        if not self.setup_complete:
            print(full_message)
            return
        
        self.main_logger.info(f"USER_ACTION | {message}")
        self._log_to_console_if_needed("USER_ACTION", full_message)
    
    def config_event(self, message: str):
        """–°–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.debug(message, "CONFIG")
    
    def api_request(self, method: str, url: str, status_code: int = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if not self.setup_complete:
            return
        
        if status_code:
            message = f"REQUEST | {method} {url} -> {status_code}"
        else:
            message = f"REQUEST | {method} {url}"
        
        if self.debug_enabled and self.api_logger:
            self.api_logger.debug(message)
    
    def api_response(self, message: str, data_size: int = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ—Ç–≤–µ—Ç–æ–≤"""
        if not self.setup_complete:
            return
        
        if data_size:
            full_message = f"RESPONSE | {message} ({data_size} bytes)"
        else:
            full_message = f"RESPONSE | {message}"
        
        if self.debug_enabled and self.api_logger:
            self.api_logger.debug(full_message)
    
    def api_error(self, message: str, exc: Exception = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ API"""
        if not self.setup_complete:
            print(f"‚ùå API Error: {message}")
            return
        
        if self.api_logger:
            self.api_logger.error(f"API_ERROR | {message}")
            if exc:
                self.api_logger.error(f"API_ERROR | Exception: {exc}")
                self.error_logger.error(f"API_ERROR | {message}: {exc}", exc_info=True)
    
    def get_logs_directory(self) -> Path:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤"""
        return self.logs_dir if self.logs_dir else Path(".")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
file_logger = FileLogger()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
def setup_logging(debug_mode: bool = False, console_debug: bool = False):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    file_logger.setup_logging(debug_mode, console_debug)

def debug(message: str, category: str = "DEBUG"):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    file_logger.debug(message, category)

def info(message: str, category: str = "INFO"):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    file_logger.info(message, category)

def success(message: str, category: str = "SUCCESS"):
    """–°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
    file_logger.success(message, category)

def warning(message: str, category: str = "WARNING"):
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    file_logger.warning(message, category)

def error(message: str, category: str = "ERROR", exc_info: bool = False):
    """–û—à–∏–±–∫–∏"""
    file_logger.error(message, category, exc_info)

def critical(message: str, category: str = "CRITICAL", exc_info: bool = False):
    """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"""
    file_logger.critical(message, category, exc_info)

def startup(message: str):
    """–°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞"""
    file_logger.startup(message)

def user_action(message: str):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    file_logger.user_action(message)

def config_event(message: str):
    """–°–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    file_logger.config_event(message)

def api_request(method: str, url: str, status_code: int = None):
    file_logger.api_request(method, url, status_code)

def api_response(message: str, data_size: int = None):
    file_logger.api_response(message, data_size)

def api_error(message: str, exc: Exception = None):
    file_logger.api_error(message, exc)

def log_config_summary(config_dict: dict):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"""
    if not file_logger.debug_enabled:
        return
    
    debug("=== CONFIG SUMMARY ===", "CONFIG")
    for section, settings in config_dict.items():
        debug(f"[{section}]", "CONFIG")
        for key, value in settings.items():
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'token' in key.lower() or 'password' in key.lower():
                if isinstance(value, str) and len(value) > 8:
                    masked_value = f"{value[:4]}...{value[-4:]}"
                else:
                    masked_value = "***"
                debug(f"  {key} = {masked_value}", "CONFIG")
            else:
                debug(f"  {key} = {value}", "CONFIG")
    debug("=====================", "CONFIG")

def get_logs_directory() -> Path:
    return file_logger.get_logs_directory()

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    setup_logging(debug_mode=True, console_debug=True)
    
    startup("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    debug("–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    success("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
    critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
    user_action("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É")
    
    print(f"\nüìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {get_logs_directory()}")
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")