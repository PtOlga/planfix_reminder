#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Planfix Reminder - –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import sys
import time
import threading
import datetime
import webbrowser
from typing import Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config_manager import ConfigManager
from planfix_api import PlanfixAPI, TaskProcessor
from task_tracker import task_tracker
from ui_components import ToastManager, SystemTray

class PlanfixReminderApp:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.config_manager = ConfigManager()
        self.planfix_api: Optional[PlanfixAPI] = None
        self.toast_manager: Optional[ToastManager] = None
        self.system_tray: Optional[SystemTray] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.is_running = False
        self.is_paused = False
        self.pause_until: Optional[datetime.datetime] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
        self.app_settings = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.current_stats = {'total': 0, 'overdue': 0, 'urgent': 0}
        self.last_check_time: Optional[datetime.datetime] = None
    
    def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        print("üöÄ –ó–∞–ø—É—Å–∫ Planfix Reminder (–º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        print("=" * 50)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        print("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        if not self._load_configuration():
            return False
        
        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
        print("\nüåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Planfix API...")
        if not self._initialize_api():
            return False
        
        # 3. –°–æ–∑–¥–∞–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        if not self._initialize_ui():
            return False
        
        print("\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
    
    def _load_configuration(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if not self.config_manager.load_config(show_diagnostics=True):
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞
            try:
                choice = input("\n–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä config.ini? (y/n): ").lower().strip()
                if choice in ['y', 'yes', '–¥–∞', '–¥', '']:
                    self.config_manager.create_sample_config()
                    print("\n‚úÖ –ü—Ä–∏–º–µ—Ä config.ini —Å–æ–∑–¥–∞–Ω!")
                    print("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É")
            except (KeyboardInterrupt, EOFError):
                pass
            
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.app_settings = self.config_manager.get_app_settings()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        return True
    
    def _initialize_api(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç API –∫–ª–∏–µ–Ω—Ç"""
        planfix_config = self.config_manager.get_planfix_config()
        role_settings = self.config_manager.get_role_settings()
        
        self.planfix_api = PlanfixAPI(planfix_config, role_settings)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
        if not self.planfix_api.test_connection():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Planfix API")
            print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("‚Ä¢ –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            print("‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω")
            print("‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π URL –∞–∫–∫–∞—É–Ω—Ç–∞")
            print("‚Ä¢ –°–µ—Ä–≤–µ—Ä Planfix –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        filter_id = planfix_config.get('filter_id')
        user_id = planfix_config.get('user_id')
        print(f"   Filter ID: {filter_id or '–ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø'}")
        print(f"   User ID: {user_id}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.app_settings['check_interval']} —Å–µ–∫")
        
        return True
    
    def _initialize_ui(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.toast_manager = ToastManager()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏–∏
            self.toast_manager.on_open_task = self._handle_open_task
            self.toast_manager.on_close_notification = self._handle_close_notification
            
            print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
            self.system_tray = SystemTray()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ—è
            self.system_tray.on_check_now = self._handle_check_tasks_now
            self.system_tray.on_pause = self._handle_pause_monitoring
            self.system_tray.on_resume = self._handle_resume_monitoring
            self.system_tray.on_quit = self._handle_quit_application
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π
            self.system_tray.start()
            print("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π —Å–æ–∑–¥–∞–Ω")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if not self.is_running:
            print("\n‚è∞ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–¥–∞—á...")
            print("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("=" * 50)
            
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            monitor_thread = threading.Thread(target=self._monitor_tasks, daemon=True)
            monitor_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            try:
                self.toast_manager.run()
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
            except Exception as e:
                print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ GUI: {e}")
            finally:
                self._shutdown()
    
    def _monitor_tasks(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–¥–∞—á"""
        cleanup_counter = 0
        
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω–∞ –ø–∞—É–∑–µ –ª–∏ –º—ã
                if self._check_pause_status():
                    time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                    continue
                
                # –û—á–∏—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –æ–∫–Ω–∞ –∏ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                if cleanup_counter >= 10:
                    task_tracker.cleanup_old_tasks()
                    cleanup_counter = 0
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
                tasks = self.planfix_api.get_filtered_tasks()
                if not tasks:
                    print("‚ÑπÔ∏è –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è")
                    time.sleep(self.app_settings['check_interval'])
                    continue
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
                categorized_tasks = TaskProcessor.categorize_tasks(tasks)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_statistics(tasks, categorized_tasks)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                self._show_notifications(categorized_tasks)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.last_check_time = datetime.datetime.now()
                
                cleanup_counter += 1
                time.sleep(self.app_settings['check_interval'])
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
                time.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _check_pause_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã"""
        if not self.is_paused:
            return False
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø–∞—É–∑—ã –∏—Å—Ç–µ–∫–ª–æ
        if self.pause_until and datetime.datetime.now() >= self.pause_until:
            self._handle_resume_monitoring()
            return False
        
        return True
    
    def _update_statistics(self, tasks: list, categorized_tasks: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.current_stats = {
            'total': len(tasks),
            'overdue': len(categorized_tasks.get('overdue', [])),
            'urgent': len(categorized_tasks.get('urgent', []))
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç—Ä–µ–µ
        if self.system_tray:
            self.system_tray.update_stats(
                self.current_stats['total'],
                self.current_stats['overdue'],
                self.current_stats['urgent']
            )
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {self.current_stats['total']} "
              f"(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {self.current_stats['overdue']}, "
              f"—Å—Ä–æ—á–Ω–æ: {self.current_stats['urgent']})")
    
    def _show_notifications(self, categorized_tasks: dict):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á"""
        new_notifications = 0
        
        for category, tasks_list in categorized_tasks.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if not self.app_settings['notifications'].get(category, True):
                continue
            
            for task in tasks_list:
                task_id = str(task.get('id'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                should_show = task_tracker.should_show_notification(
                    task_id,
                    category,
                    self.app_settings['max_total_windows'],
                    self.app_settings['max_windows_per_category']
                )
                
                if should_show:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    title, message = TaskProcessor.format_task_message(task, category)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    self.toast_manager.show_notification(title, message, category, task_id)
                    
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∫–∞–∑
                    task_tracker.register_notification_shown(task_id, category)
                    
                    new_notifications += 1
                    print(f"üì¨ –ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {category} - {task.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                    time.sleep(1)
        
        if new_notifications == 0:
            print("üì≠ –ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç")
    
    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô =====
    
    def _handle_open_task(self, task_id: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            planfix_config = self.config_manager.get_planfix_config()
            account_url = planfix_config['account_url'].replace('/rest', '')
            task_url = f"{account_url}/task/{task_id}/"
            webbrowser.open(task_url)
            print(f"üåê –û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–¥–∞—á–∞ #{task_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏: {e}")
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π URL
            webbrowser.open(f"https://planfix.com/task/{task_id}/")
    
    def _handle_close_notification(self, task_id: str, reason: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        task_tracker.register_notification_closed(task_id, reason)
        print(f"‚ùå –ó–∞–∫—Ä—ã—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{task_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
    
    def _handle_check_tasks_now(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á"""
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á...")
        
        try:
            tasks = self.planfix_api.get_filtered_tasks()
            categorized_tasks = TaskProcessor.categorize_tasks(tasks)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_statistics(tasks, categorized_tasks)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            new_notifications = 0
            for category, tasks_list in categorized_tasks.items():
                if not self.app_settings['notifications'].get(category, True):
                    continue
                
                for task in tasks_list:
                    task_id = str(task.get('id'))
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫–∞–∑
                    task_tracker.force_show_task(task_id)
                    
                    title, message = TaskProcessor.format_task_message(task, category)
                    self.toast_manager.show_notification(title, message, category, task_id)
                    task_tracker.register_notification_shown(task_id, category)
                    
                    new_notifications += 1
                    time.sleep(0.5)
            
            print(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {new_notifications} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    def _handle_pause_monitoring(self, minutes: int):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—É–∑—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_paused = True
        self.pause_until = datetime.datetime.now() + datetime.timedelta(minutes=minutes)
        
        if self.system_tray:
            self.system_tray.set_paused(True, self.pause_until)
        
        print(f"‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç")
    
    def _handle_resume_monitoring(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_paused = False
        self.pause_until = None
        
        if self.system_tray:
            self.system_tray.set_paused(False)
        
        print("‚ñ∂Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω")
    
    def _handle_quit_application(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        self._shutdown()
    
    def _shutdown(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.is_running = False
        
        if self.system_tray:
            self.system_tray.stop()
        
        if self.toast_manager:
            self.toast_manager.stop()
        
        print("üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        sys.exit(0)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = PlanfixReminderApp()
        
        if app.initialize():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app.run()
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
            
    except KeyboardInterrupt:
        print("\nüëã –í—ã—Ö–æ–¥ –ø–æ Ctrl+C")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1)

if __name__ == "__main__":
    main()