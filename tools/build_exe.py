#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ exe —Ñ–∞–π–ª–∞ Planfix Reminder
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
import time

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        ('PyInstaller', 'pyinstaller'),
        ('requests', 'requests'),
        ('pystray', 'pystray'),
        ('PIL', 'Pillow'),
        ('plyer', 'plyer')
    ]

    missing_packages = []

    for import_name, package_name in required_packages:
        try:
            __import__(import_name)
            print(f"  ‚úÖ {package_name}")
        except ImportError:
            missing_packages.append(package_name)
            print(f"  ‚ùå {package_name}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def clean_build_dirs():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–æ–∫ —Å–±–æ—Ä–∫–∏...")
    
    dirs_to_clean = ['build', 'dist', '__pycache__']
    
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            try:
                shutil.rmtree(dir_name)
                print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_name}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {dir_name}: {e}")
    
    # –£–¥–∞–ª—è–µ–º .pyc —Ñ–∞–π–ª—ã
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith('.pyc'):
                try:
                    os.remove(os.path.join(root, file))
                except:
                    pass

def build_exe():
    """–°–æ–±–∏—Ä–∞–µ—Ç exe —Ñ–∞–π–ª"""
    print("\nüî® –°–±–æ—Ä–∫–∞ exe —Ñ–∞–π–ª–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ spec —Ñ–∞–π–ª–∞
    spec_file = 'planfix_reminder.spec'
    if not os.path.exists(spec_file):
        print(f"‚ùå –§–∞–π–ª {spec_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º PyInstaller
        cmd = [sys.executable, '-m', 'PyInstaller', '--clean', spec_file]
        print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è PyInstaller: {e}")
        return False

def check_result():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–±–æ—Ä–∫–∏"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    
    exe_path = Path('dist/PlanfixReminder.exe')
    
    if exe_path.exists():
        size_mb = exe_path.stat().st_size / (1024 * 1024)
        print(f"‚úÖ Exe —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {exe_path}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        dist_path = Path('dist')
        files_in_dist = list(dist_path.glob('*'))
        
        print(f"üìÅ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ dist:")
        for file in files_in_dist:
            if file.is_file():
                size_kb = file.stat().st_size / 1024
                print(f"  üìÑ {file.name} ({size_kb:.1f} –ö–ë)")
            else:
                print(f"  üìÅ {file.name}/")
        
        return True
    else:
        print("‚ùå Exe —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

def create_distribution():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"""
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞...")
    
    dist_folder = Path('PlanfixReminder_Distribution')
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
    if dist_folder.exists():
        shutil.rmtree(dist_folder)
    
    dist_folder.mkdir()
    
    # –ö–æ–ø–∏—Ä—É–µ–º exe —Ñ–∞–π–ª
    exe_source = Path('dist/PlanfixReminder.exe')
    if exe_source.exists():
        shutil.copy2(exe_source, dist_folder / 'PlanfixReminder.exe')
        print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: PlanfixReminder.exe")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    config_files = [
        'config.ini.example',
        'README.md',
        'planfix_reminder_help.html'
    ]
    
    for config_file in config_files:
        if Path(config_file).exists():
            shutil.copy2(config_file, dist_folder / config_file)
            print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {config_file}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
    install_instructions = """# Planfix Reminder - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª `config.ini.example` –≤ `config.ini`
2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ `config.ini` - —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ Planfix API
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ `PlanfixReminder.exe`

## –ù–∞—Å—Ç—Ä–æ–π–∫–∞

–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `config.ini` –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ:

```ini
[planfix]
api_key = –≤–∞—à_api_–∫–ª—é—á
account = –≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç.planfix.ru
user_id = –≤–∞—à_id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
```

## –°–ø—Ä–∞–≤–∫–∞

–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ñ–∞–π–ª–µ `planfix_reminder_help.html`

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–∑ –º–µ–Ω—é —Ç—Ä–µ—è (üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞)
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ IT-–ø–æ–¥–¥–µ—Ä–∂–∫—É
"""
    
    with open(dist_folder / 'INSTALL.md', 'w', encoding='utf-8') as f:
        f.write(install_instructions)
    
    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: INSTALL.md")
    print(f"\nüéâ –î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –≥–æ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ: {dist_folder}")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏"""
    print("üöÄ –°–±–æ—Ä–∫–∞ Planfix Reminder –≤ exe —Ñ–∞–π–ª")
    print("=" * 50)
    
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_requirements():
        return False
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏
    clean_build_dirs()
    
    # –°–æ–±–∏—Ä–∞–µ–º exe
    if not build_exe():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not check_result():
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤
    create_distribution()
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: {duration:.1f} —Å–µ–∫—É–Ω–¥")
    print("üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    return True

if __name__ == "__main__":
    success = main()
    
    if not success:
        print("\n‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
    else:
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! Exe —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ PlanfixReminder_Distribution")
        sys.exit(0)
