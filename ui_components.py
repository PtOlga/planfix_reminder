#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
"""

import tkinter as tk
from tkinter import ttk
import threading
import queue
import webbrowser
import datetime
from typing import Optional, Dict, Any, Callable
import pystray
from PIL import Image, ImageDraw
import tempfile

try:
    import winsound
except ImportError:
    winsound = None

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from file_logger import debug, info, success, warning, error, critical

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
try:
    from diagnostic_module import run_diagnostic
    DIAGNOSTIC_AVAILABLE = True
except ImportError:
    DIAGNOSTIC_AVAILABLE = False
    warning("–ú–æ–¥—É–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "UI")


class ToastNotification:
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""

    def __init__(
        self, title: str, message: str, category: str, task_id: Optional[str] = None
    ):
        self.title = title
        self.message = message
        self.category = category
        self.task_id = task_id
        self.root = None
        self.is_closed = False
        self.drag_data = {"x": 0, "y": 0}

        # Callback —Ñ—É–Ω–∫—Ü–∏–∏ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.on_open_task: Optional[Callable[[str], None]] = None
        self.on_snooze: Optional[Callable[[str, str], None]] = None
        self.on_close: Optional[Callable[[str, str], None]] = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.styles = {
            "overdue": {
                "bg_color": "#FF4444",
                "text_color": "white",
                "border_color": "#CC0000",
                "sound": True,
                "sound_type": "critical",
            },
            "urgent": {
                "bg_color": "#FF8800",
                "text_color": "white",
                "border_color": "#CC4400",
                "sound": True,
                "sound_type": "warning",
            },
            "current": {
                "bg_color": "#0066CC",
                "text_color": "white",
                "border_color": "#003388",
                "sound": False,
                "sound_type": None,
            },
        }

        debug(
            f"–°–æ–∑–¥–∞–Ω–æ Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –∑–∞–¥–∞—á–∞ #{task_id}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category}", "UI"
        )

    def create_window(self, master_root: tk.Tk, position: tuple = None):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            debug(
                f"–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {position}", "UI"
            )

            self.root = tk.Toplevel(master_root)
            self.root.withdraw()

            self.root.overrideredirect(True)
            self.root.attributes("-topmost", True)
            self.root.attributes("-alpha", 0.95)

            style = self.styles.get(self.category, self.styles["current"])

            window_width = 320
            window_height = 140

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if position:
                x, y = position
                debug(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {x}, {y}", "UI")
            else:
                x, y = self._calculate_position(window_width, window_height)
                debug(f"–í—ã—á–∏—Å–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è: {x}, {y}", "UI")

            self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self._create_ui(style)

            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
            if style["sound"]:
                debug(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Ç–∏–ø–∞: {style['sound_type']}", "UI")
                threading.Thread(
                    target=self._play_sound, args=(style["sound_type"],), daemon=True
                ).start()
            else:
                debug("–ó–≤—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "UI")

            self.root.deiconify()
            self._animate_in()

            success(
                f"–û–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id} —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ", "UI"
            )

        except Exception as e:
            error(
                f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}",
                "UI",
                exc_info=True,
            )

    def _create_ui(self, style: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            debug(f"–°–æ–∑–¥–∞–Ω–∏–µ UI –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}", "UI")

            # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container = tk.Frame(
                self.root, bg=style["border_color"], relief="raised", bd=2
            )
            container.pack(fill="both", expand=True, padx=2, pady=2)

            # –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å
            title_bar = tk.Frame(container, bg=style["bg_color"], height=25)
            title_bar.pack(fill="x", padx=1, pady=(1, 0))
            title_bar.pack_propagate(False)

            # –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_icon = {"overdue": "üî¥", "urgent": "üü°", "current": "üìã"}.get(
                self.category, "üìã"
            )

            icon_label = tk.Label(
                title_bar,
                text=category_icon,
                font=("Arial", 10),
                fg=style["text_color"],
                bg=style["bg_color"],
            )
            icon_label.pack(side="left", padx=(5, 0), pady=2)

            # ID –∑–∞–¥–∞—á–∏
            if self.task_id:
                task_id_label = tk.Label(
                    title_bar,
                    text=f"#{self.task_id}",
                    font=("Arial", 8),
                    fg=style["text_color"],
                    bg=style["bg_color"],
                )
                task_id_label.pack(side="left", padx=(5, 0), pady=2)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self._create_control_buttons(title_bar, style)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
            self._bind_dragging(title_bar, icon_label)

            # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_frame = tk.Frame(container, bg=style["bg_color"], padx=8, pady=5)
            content_frame.pack(fill="both", expand=True, padx=1, pady=(0, 1))

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
            task_title = (
                self.title.split(": ", 1)[-1] if ": " in self.title else self.title
            )
            title_label = tk.Label(
                content_frame,
                text=task_title,
                font=("Arial", 9, "bold"),
                fg=style["text_color"],
                bg=style["bg_color"],
                wraplength=280,
                justify="left",
                anchor="w",
            )
            title_label.pack(fill="x", pady=(0, 3))

            # –°–æ–æ–±—â–µ–Ω–∏–µ
            message_lines = self.message.split("\n")[:2]
            message_text = "\n".join(message_lines)

            info_label = tk.Label(
                content_frame,
                text=message_text,
                font=("Arial", 7),
                fg=style["text_color"],
                bg=style["bg_color"],
                wraplength=280,
                justify="left",
                anchor="w",
            )
            info_label.pack(fill="x", pady=(0, 5))

            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            self._create_action_buttons(content_frame, style)

            debug(f"UI –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ", "UI")

        except Exception as e:
            error(
                f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UI –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}",
                "UI",
                exc_info=True,
            )

    def _create_control_buttons(self, parent: tk.Frame, style: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º"""
        try:
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_btn = tk.Button(
                parent,
                text="‚úï",
                font=("Arial", 8, "bold"),
                command=lambda: self._handle_close("manual"),
                bg=style["text_color"],
                fg=style["bg_color"],
                relief="flat",
                width=2,
                height=1,
            )
            close_btn.pack(side="right", padx=(0, 5), pady=2)

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
            pin_btn = tk.Button(
                parent,
                text="üìå",
                font=("Arial", 6),
                command=self._toggle_pin,
                bg=style["text_color"],
                fg=style["bg_color"],
                relief="flat",
                width=2,
                height=1,
            )
            pin_btn.pack(side="right", padx=(0, 2), pady=2)

            debug(f"–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id} —Å–æ–∑–¥–∞–Ω—ã", "UI")

        except Exception as e:
            error(
                f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}",
                "UI",
                exc_info=True,
            )

    def _create_action_buttons(self, parent: tk.Frame, style: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            button_frame = tk.Frame(parent, bg=style["bg_color"])
            button_frame.pack(fill="x")

            buttons_created = []

            # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å"
            if self.task_id:
                open_btn = tk.Button(
                    button_frame,
                    text="–û—Ç–∫—Ä—ã—Ç—å",
                    font=("Arial", 7),
                    command=self._handle_open_task,
                    bg="white",
                    fg="black",
                    relief="flat",
                    padx=6,
                    pady=1,
                )
                open_btn.pack(side="left", padx=(0, 3))
                buttons_created.append("–û—Ç–∫—Ä—ã—Ç—å")

            # –ö–Ω–æ–ø–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á
            if self.category in ["overdue", "urgent"]:
                snooze_btn = tk.Button(
                    button_frame,
                    text="15–º–∏–Ω",
                    font=("Arial", 7),
                    command=lambda: self._handle_close("snooze_15min"),
                    bg="lightgray",
                    fg="black",
                    relief="flat",
                    padx=6,
                    pady=1,
                )
                snooze_btn.pack(side="left", padx=(0, 3))
                buttons_created.append("15–º–∏–Ω")

            # –ö–Ω–æ–ø–∫–∞ "1 —á–∞—Å"
            hour_btn = tk.Button(
                button_frame,
                text="1—á",
                font=("Arial", 7),
                command=lambda: self._handle_close("snooze_1hour"),
                bg="lightyellow",
                fg="black",
                relief="flat",
                padx=6,
                pady=1,
            )
            hour_btn.pack(side="left", padx=(0, 3))
            buttons_created.append("1—á")

            # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
            done_btn = tk.Button(
                button_frame,
                text="–ì–æ—Ç–æ–≤–æ",
                font=("Arial", 7),
                command=lambda: self._handle_close("done"),
                bg="lightgreen",
                fg="black",
                relief="flat",
                padx=6,
                pady=1,
            )
            done_btn.pack(side="right")
            buttons_created.append("–ì–æ—Ç–æ–≤–æ")

            debug(
                f"–ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {buttons_created}", "UI"
            )

        except Exception as e:
            error(
                f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}",
                "UI",
                exc_info=True,
            )

    def _bind_dragging(self, *widgets):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫ –≤–∏–¥–∂–µ—Ç–∞–º"""
        try:
            for widget in widgets:
                widget.bind("<Button-1>", self._start_drag)
                widget.bind("<B1-Motion>", self._on_drag)
            debug(
                f"–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ {len(widgets)} –≤–∏–¥–∂–µ—Ç–∞–º –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}",
                "UI",
            )
        except Exception as e:
            warning(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}", "UI"
            )

    def _calculate_position(self, width: int, height: int) -> tuple:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()

            x = screen_width - width - 20
            y = 20

            debug(
                f"–†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞: {screen_width}x{screen_height}, –ø–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞: {x},{y}",
                "UI",
            )
            return x, y

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}", "UI")
            return 100, 100  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def _start_drag(self, event):
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        try:
            self.drag_data["x"] = event.x_root - self.root.winfo_x()
            self.drag_data["y"] = event.y_root - self.root.winfo_y()
            debug(
                f"–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {self.drag_data}", "UI"
            )
        except Exception as e:
            warning(
                f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}", "UI"
            )

    def _on_drag(self, event):
        """–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        try:
            x = event.x_root - self.drag_data["x"]
            y = event.y_root - self.drag_data["y"]
            self.root.geometry(f"+{x}+{y}")
        except Exception as e:
            warning(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}", "UI")

    def _toggle_pin(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–∫–Ω–∞"""
        try:
            current_topmost = self.root.attributes("-topmost")
            new_topmost = not current_topmost
            self.root.attributes("-topmost", new_topmost)
            debug(
                f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {'–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ' if new_topmost else '–æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ'}",
                "UI",
            )
        except Exception as e:
            warning(
                f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}", "UI"
            )

    def _animate_in(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞"""
        try:
            alpha = 0.0

            def fade_in():
                nonlocal alpha
                if self.root and not self.is_closed:
                    alpha += 0.15
                    if alpha <= 0.95:
                        try:
                            self.root.attributes("-alpha", alpha)
                            self.root.after(40, fade_in)
                        except tk.TclError:
                            pass
                    else:
                        debug(
                            f"–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}",
                            "UI",
                        )

            fade_in()
        except Exception as e:
            warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}", "UI")

    def _play_sound(self, sound_type: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª"""
        try:
            if not winsound:
                debug("–ú–æ–¥—É–ª—å winsound –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∑–≤—É–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω", "UI")
                return

            debug(
                f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ '{sound_type}' –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}", "UI"
            )

            if sound_type == "critical":
                for i in range(3):
                    winsound.MessageBeep(winsound.MB_ICONHAND)
                    debug(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–≤—É–∫ #{i+1} –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}", "UI")
                    threading.Event().wait(0.3)
            elif sound_type == "warning":
                winsound.MessageBeep(winsound.MB_ICONEXCLAMATION)
                debug(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π –∑–≤—É–∫ –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}", "UI")

            success(
                f"–ó–≤—É–∫ '{sound_type}' –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}", "UI"
            )

        except Exception as e:
            warning(
                f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}", "UI"
            )

    def _handle_open_task(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ #{self.task_id}", "UI")
            if self.on_open_task and self.task_id:
                self.on_open_task(self.task_id)
                success(f"–ó–∞–¥–∞—á–∞ #{self.task_id} –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è", "UI")
            else:
                warning(
                    f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É #{self.task_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç callback –∏–ª–∏ ID",
                    "UI",
                )
        except Exception as e:
            error(
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}",
                "UI",
                exc_info=True,
            )

    def _handle_close(self, reason: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ #{self.task_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}", "UI")

            if self.on_close and self.task_id:
                self.on_close(self.task_id, reason)
                info(f"–ó–∞–¥–∞—á–∞ #{self.task_id} –∑–∞–∫—Ä—ã—Ç–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}", "UI")

            self.is_closed = True
            if self.root:
                try:
                    self.root.destroy()
                    success(f"–û–∫–Ω–æ –∑–∞–¥–∞—á–∏ #{self.task_id} —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ", "UI")
                except tk.TclError as e:
                    debug(f"–û–∫–Ω–æ –∑–∞–¥–∞—á–∏ #{self.task_id} —É–∂–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ: {e}", "UI")

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ #{self.task_id}: {e}", "UI", exc_info=True)


class ToastManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        try:
            self.root = tk.Tk()
            self.root.withdraw()
            self.root.title("Planfix Reminder")

            # –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.notification_queue = queue.Queue()

            # –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self.active_notifications = []

            # Callback —Ñ—É–Ω–∫—Ü–∏–∏
            self.on_open_task: Optional[Callable[[str], None]] = None
            self.on_close_notification: Optional[Callable[[str, str], None]] = None

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
            self._check_queue()

            info("ToastManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "UI")

        except Exception as e:
            critical(
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ToastManager: {e}",
                "UI",
                exc_info=True,
            )
            raise

    def _check_queue(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            processed_count = 0
            while True:
                try:
                    toast_data = self.notification_queue.get_nowait()
                    self._create_toast(toast_data)
                    processed_count += 1
                except queue.Empty:
                    break

            if processed_count > 0:
                debug(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {processed_count}", "UI")

            # –û—á–∏—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
            self.cleanup_notifications()

            self.root.after(100, self._check_queue)

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", "UI", exc_info=True)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.root.after(1000, self._check_queue)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def _create_toast(self, toast_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            task_id = toast_data.get("task_id")
            category = toast_data.get("category")

            debug(f"–°–æ–∑–¥–∞–Ω–∏–µ Toast –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id} ({category})", "UI")

            toast = ToastNotification(
                title=toast_data["title"],
                message=toast_data["message"],
                category=category,
                task_id=task_id,
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏–∏
            toast.on_open_task = self.on_open_task
            toast.on_close = self.on_close_notification

            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            position = self._calculate_toast_position()
            debug(f"–í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id}: {position}", "UI")

            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
            toast.create_window(self.root, position)
            self.active_notifications.append(toast)

            success(
                f"Toast —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id}, –≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.active_notifications)}",
                "UI",
            )

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Toast: {e}", "UI", exc_info=True)

    def _calculate_toast_position(self) -> tuple:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()

            debug(f"–†–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞: {screen_width}x{screen_height}", "UI")

            # –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            window_width = 320
            window_height = 140

            # –û—Ç—Å—Ç—É–ø—ã –æ—Ç –∫—Ä–∞–µ–≤ —ç–∫—Ä–∞–Ω–∞
            margin_right = 20
            margin_top = 20
            margin_bottom = 60  # –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á

            # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
            start_x = screen_width - window_width - margin_right
            start_y = margin_top

            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω –≤ —Å—Ç–æ–ª–±—Ü–µ
            available_height = screen_height - margin_top - margin_bottom
            max_windows_in_column = max(1, available_height // (window_height + 10))

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            active_count = len(self.active_notifications)

            debug(
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {active_count}, –º–∞–∫—Å. –≤ —Å—Ç–æ–ª–±—Ü–µ: {max_windows_in_column}",
                "UI",
            )

            # –ö–∞—Å–∫–∞–¥–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
            if active_count < max_windows_in_column:
                # –ü—Ä–æ—Å—Ç–æ–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –æ–∫–æ–Ω
                x = start_x
                y = start_y + (active_count * (window_height + 10))
                debug(f"–ü—Ä–æ—Å—Ç–æ–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: {x}, {y}", "UI")
            else:
                # –ï—Å–ª–∏ –æ–∫–æ–Ω –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
                cascade_offset_x = 25  # –°–º–µ—â–µ–Ω–∏–µ –ø–æ X –¥–ª—è –∫–∞—Å–∫–∞–¥–∞
                cascade_offset_y = 15  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Y

                # –ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –∏ –ø–æ–∑–∏—Ü–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ
                column = active_count // max_windows_in_column
                position_in_column = active_count % max_windows_in_column

                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
                x = start_x - (column * cascade_offset_x)
                y = (
                    start_y
                    + (position_in_column * (window_height + 10))
                    + (column * cascade_offset_y)
                )

                debug(
                    f"–ö–∞—Å–∫–∞–¥–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ: —Å—Ç–æ–ª–±–µ—Ü {column}, –ø–æ–∑–∏—Ü–∏—è {position_in_column}, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {x},{y}",
                    "UI",
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –æ–∫–Ω–æ –∑–∞ –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É —ç–∫—Ä–∞–Ω–∞
                if x < 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
                    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥
                    column = 0
                    x = start_x
                    y = start_y + (position_in_column * (window_height + 10))
                    debug(f"–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≥—Ä–∞–Ω–∏—Ü: –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {x},{y}", "UI")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü —ç–∫—Ä–∞–Ω–∞
            x = max(50, min(x, screen_width - window_width - 20))
            y = max(margin_top, min(y, screen_height - window_height - margin_bottom))

            debug(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–Ω–∏—Ü: {x},{y}", "UI")

            return x, y

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ Toast: {e}", "UI", exc_info=True)
            return 100, 100  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def cleanup_notifications(self):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö"""
        try:
            # –£–±–∏—Ä–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            old_count = len(self.active_notifications)
            self.active_notifications = [
                n for n in self.active_notifications if not n.is_closed
            ]
            new_count = len(self.active_notifications)

            if old_count != new_count:
                debug(f"–û—á–∏—Å—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –±—ã–ª–æ {old_count}, —Å—Ç–∞–ª–æ {new_count}", "UI")

                # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω
                if new_count > 0:
                    self._reposition_active_notifications()

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", "UI", exc_info=True)

    def _reposition_active_notifications(self):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            debug(
                f"–ü–µ—Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(self.active_notifications)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "UI",
            )

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()

            window_width = 320
            window_height = 140
            margin_right = 20
            margin_top = 20
            margin_bottom = 60

            start_x = screen_width - window_width - margin_right
            start_y = margin_top

            repositioned_count = 0

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for i, notification in enumerate(self.active_notifications):
                if notification.root and not notification.is_closed:
                    try:
                        # –ö–∞—Å–∫–∞–¥–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º
                        cascade_offset = min(i * 20, 100)  # –ú–∞–∫—Å–∏–º—É–º 100px —Å–º–µ—â–µ–Ω–∏—è
                        x = start_x - cascade_offset
                        y = start_y + (i * (window_height + 10))

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                        x = max(50, min(x, screen_width - window_width - 20))
                        y = max(
                            margin_top,
                            min(y, screen_height - window_height - margin_bottom),
                        )

                        # –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –æ–∫–Ω–æ
                        notification.root.geometry(f"+{x}+{y}")
                        repositioned_count += 1

                        debug(
                            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification.task_id} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏—é {x},{y}",
                            "UI",
                        )

                    except tk.TclError:
                        # –û–∫–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ
                        notification.is_closed = True
                        debug(
                            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{notification.task_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–æ–µ",
                            "UI",
                        )
                    except Exception as e:
                        warning(
                            f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è #{notification.task_id}: {e}",
                            "UI",
                        )

            if repositioned_count > 0:
                success(f"–ü–µ—Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {repositioned_count}", "UI")

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", "UI", exc_info=True)

    def show_notification(
        self, title: str, message: str, category: str, task_id: Optional[str] = None
    ):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            toast_data = {
                "title": title,
                "message": message,
                "category": category,
                "task_id": task_id,
            }
            self.notification_queue.put(toast_data)

            debug(
                f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: –∑–∞–¥–∞—á–∞ #{task_id} ({category})", "UI"
            )
            info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id}", "UI")

        except Exception as e:
            error(
                f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id}: {e}",
                "UI",
                exc_info=True,
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        try:
            info("–ó–∞–ø—É—Å–∫ GUI —Ü–∏–∫–ª–∞ ToastManager", "UI")
            self.root.mainloop()
        except Exception as e:
            critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ GUI —Ü–∏–∫–ª–∞: {e}", "UI", exc_info=True)
            raise

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä"""
        try:
            info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ ToastManager", "UI")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for notification in self.active_notifications:
                if notification.root and not notification.is_closed:
                    try:
                        notification.root.destroy()
                    except:
                        pass

            self.root.quit()
            success("ToastManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "UI")

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ToastManager: {e}", "UI", exc_info=True)


class SystemTray:
    """–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        self.tray_icon = None
        self.is_paused = False
        self.pause_until = None
        self.stats = {"total": 0, "overdue": 0, "urgent": 0}
        self.last_check_time = None

        # Callback —Ñ—É–Ω–∫—Ü–∏–∏
        self.on_check_now: Optional[Callable[[], None]] = None
        self.on_pause: Optional[Callable[[int], None]] = None
        self.on_resume: Optional[Callable[[], None]] = None
        self.on_quit: Optional[Callable[[], None]] = None

        info("SystemTray –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "UI")

    def create_icon(self) -> Image.Image:
        """–°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç—Ä–µ—è"""
        try:
            debug("–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è", "UI")

            image = Image.new("RGBA", (64, 64), (0, 0, 0, 0))
            draw = ImageDraw.Draw(image)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
            if self.is_paused:
                color = (128, 128, 128)  # –°–µ—Ä—ã–π - –Ω–∞ –ø–∞—É–∑–µ
                status = "–Ω–∞ –ø–∞—É–∑–µ"
            elif self.stats["overdue"] > 0:
                color = (255, 68, 68)  # –ö—Ä–∞—Å–Ω—ã–π - –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
                status = f"{self.stats['overdue']} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö"
            elif self.stats["urgent"] > 0:
                color = (255, 136, 0)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π - –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ
                status = f"{self.stats['urgent']} —Å—Ä–æ—á–Ω—ã—Ö"
            else:
                color = (0, 200, 0)  # –ó–µ–ª–µ–Ω—ã–π - –≤—Å–µ —Ö–æ—Ä–æ—à–æ
                status = "–≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ"

            # –†–∏—Å—É–µ–º –∫—Ä—É–≥
            draw.ellipse([8, 8, 56, 56], fill=color, outline=(255, 255, 255), width=2)

            # –î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É P
            draw.text((32, 32), "P", fill=(255, 255, 255), anchor="mm")

            debug(f"–ò–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {status}", "UI")
            return image

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è: {e}", "UI", exc_info=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return Image.new("RGBA", (64, 64), (0, 100, 200, 255))

    def create_menu(self) -> pystray.Menu:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ç—Ä–µ—è"""
        try:
            debug("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è", "UI")

            # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if self.is_paused:
                if self.pause_until:
                    pause_str = f"–ù–∞ –ø–∞—É–∑–µ –¥–æ {self.pause_until.strftime('%H:%M')}"
                else:
                    pause_str = "–ù–∞ –ø–∞—É–∑–µ"
                status_item = pystray.MenuItem(f"‚è∏Ô∏è {pause_str}", None, enabled=False)
            else:
                total = self.stats["total"]
                overdue = self.stats["overdue"]
                status_item = pystray.MenuItem(
                    f"üü¢ –ê–∫—Ç–∏–≤–µ–Ω ({total} –∑–∞–¥–∞—á, {overdue} –ø—Ä–æ—Å—Ä–æ—á.)",
                    None,
                    enabled=False,
                )

            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            if self.last_check_time:
                time_str = self.last_check_time.strftime("%H:%M:%S")
                last_check_item = pystray.MenuItem(
                    f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {time_str}", None, enabled=False
                )
            else:
                last_check_item = pystray.MenuItem(
                    "–ï—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å", None, enabled=False
                )

            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
            menu_items = [
                status_item,
                last_check_item,
                pystray.Menu.SEPARATOR,
                pystray.MenuItem(
                    "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", lambda: self._handle_check_now()
                ),
            ]

            # –ü–∞—É–∑–∞ –∏–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if not self.is_paused:
                menu_items.extend(
                    [
                        pystray.MenuItem(
                            "‚è∏Ô∏è –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å", lambda: self._handle_pause(60)
                        ),
                        pystray.MenuItem(
                            "‚è∏Ô∏è –ü–∞—É–∑–∞ –¥–æ –∑–∞–≤—Ç—Ä–∞ 9:00",
                            lambda: self._handle_pause_until_tomorrow(),
                        ),
                    ]
                )
            else:
                menu_items.append(
                    pystray.MenuItem("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", lambda: self._handle_resume())
                )

            menu_items.extend(
                [
                    pystray.Menu.SEPARATOR,
                    pystray.MenuItem(
                        "üåê –û—Ç–∫—Ä—ã—Ç—å Planfix", lambda: self._handle_open_planfix()
                    ),
                    pystray.MenuItem("üìñ –°–ø—Ä–∞–≤–∫–∞", lambda: self._handle_show_help()),
                ]
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
            if DIAGNOSTIC_AVAILABLE:
                menu_items.append(
                    pystray.MenuItem("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", lambda: self._handle_diagnostic())
                )

            menu_items.extend(
                [
                    pystray.Menu.SEPARATOR,
                    pystray.MenuItem("‚ùå –í—ã—Ö–æ–¥", lambda: self._handle_quit()),
                ]
            )

            debug(f"–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ —Å {len(menu_items)} –ø—É–Ω–∫—Ç–∞–º–∏", "UI")
            return pystray.Menu(*menu_items)

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Ç—Ä–µ—è: {e}", "UI", exc_info=True)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return pystray.Menu(pystray.MenuItem("–û—à–∏–±–∫–∞", None, enabled=False))

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π"""
        try:
            info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è", "UI")

            self.tray_icon = pystray.Icon(
                name="Planfix Reminder",
                icon=self.create_icon(),
                title="Planfix Reminder",
                menu=self.create_menu(),
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            def update_menu():
                try:
                    while True:
                        threading.Event().wait(30)
                        if self.tray_icon:
                            self.tray_icon.menu = self.create_menu()
                            debug("–ú–µ–Ω—é —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ", "UI")
                except Exception as e:
                    error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é —Ç—Ä–µ—è: {e}", "UI")

            threading.Thread(target=update_menu, daemon=True).start()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self.tray_icon.run, daemon=True).start()

            success("–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –∑–∞–ø—É—â–µ–Ω", "UI")

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è: {e}", "UI", exc_info=True)

    def update_stats(self, total: int, overdue: int, urgent: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            old_stats = self.stats.copy()
            self.stats = {"total": total, "overdue": overdue, "urgent": urgent}
            self.last_check_time = datetime.datetime.now()

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if old_stats != self.stats:
                info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {self.stats}", "UI")
            else:
                debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {self.stats}", "UI")

            if self.tray_icon:
                self.tray_icon.icon = self.create_icon()

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ—è: {e}", "UI", exc_info=True)

    def set_paused(self, paused: bool, until: Optional[datetime.datetime] = None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã"""
        try:
            self.is_paused = paused
            self.pause_until = until

            status = f"{'–≤–∫–ª—é—á–µ–Ω–∞' if paused else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}"
            if until:
                status += f" –¥–æ {until.strftime('%H:%M')}"

            info(f"–ü–∞—É–∑–∞ {status}", "UI")

            if self.tray_icon:
                self.tray_icon.icon = self.create_icon()

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—É–∑—ã: {e}", "UI", exc_info=True)

    def _handle_check_now(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–π—á–∞—Å"""
        try:
            debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å'", "UI")
            if self.on_check_now:
                self.on_check_now()
            else:
                warning("Callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–π—á–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "UI")
        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å': {e}", "UI", exc_info=True)

    def _handle_pause(self, minutes: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã"""
        try:
            debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–ü–∞—É–∑–∞ –Ω–∞ {minutes} –º–∏–Ω—É—Ç'", "UI")
            if self.on_pause:
                self.on_pause(minutes)
            else:
                warning("Callback –¥–ª—è –ø–∞—É–∑—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "UI")
        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—É–∑—ã: {e}", "UI", exc_info=True)

    def _handle_pause_until_tomorrow(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã –¥–æ –∑–∞–≤—Ç—Ä–∞"""
        try:
            tomorrow = datetime.date.today() + datetime.timedelta(days=1)
            tomorrow_9am = datetime.datetime.combine(tomorrow, datetime.time(9, 0))

            minutes = int((tomorrow_9am - datetime.datetime.now()).total_seconds() / 60)
            debug(f"–ü–∞—É–∑–∞ –¥–æ –∑–∞–≤—Ç—Ä–∞: {minutes} –º–∏–Ω—É—Ç", "UI")

            if self.on_pause:
                self.on_pause(minutes)
            else:
                warning("Callback –¥–ª—è –ø–∞—É–∑—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "UI")
        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—É–∑—ã –¥–æ –∑–∞–≤—Ç—Ä–∞: {e}", "UI", exc_info=True)

    def _handle_resume(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å'", "UI")
            if self.on_resume:
                self.on_resume()
            else:
                warning("Callback –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "UI")
        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", "UI", exc_info=True)

    def _handle_open_planfix(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Planfix"""
        try:
            debug("–û—Ç–∫—Ä—ã—Ç–∏–µ Planfix –≤ –±—Ä–∞—É–∑–µ—Ä–µ", "UI")
            webbrowser.open("https://planfix.com")
            success("Planfix –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ", "UI")
        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Planfix: {e}", "UI", exc_info=True)

    def _handle_show_help(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        try:
            debug("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "UI")

            # HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø—Ä–∞–≤–∫–∏
            help_html = """<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–ø—Ä–∞–≤–∫–∞ - Planfix Reminder</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.5; color: #333; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
        .container { max-width: 700px; margin: 0 auto; padding: 15px; }
        .header { background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-radius: 15px; padding: 25px; text-align: center; margin-bottom: 20px; box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1); }
        .header h1 { font-size: 2rem; background: linear-gradient(45deg, #667eea, #764ba2); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; margin-bottom: 8px; }
        .subtitle { color: #666; font-size: 1rem; }
        .main-content { background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px); border-radius: 15px; padding: 30px; box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1); }
        .section { margin-bottom: 25px; }
        .section h2 { color: #667eea; font-size: 1.3rem; margin-bottom: 12px; display: flex; align-items: center; gap: 8px; }
        .notification-types { display: flex; gap: 15px; margin: 15px 0; flex-wrap: wrap; }
        .notification-card { flex: 1; min-width: 180px; padding: 18px; border-radius: 12px; color: white; text-align: center; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15); }
        .notification-card.overdue { background: linear-gradient(135deg, #ff4444, #cc0000); }
        .notification-card.urgent { background: linear-gradient(135deg, #ff8800, #cc4400); }
        .notification-card.current { background: linear-gradient(135deg, #0066cc, #003388); }
        .notification-card h3 { color: white; margin-bottom: 8px; font-size: 1.1rem; }
        .notification-card p { margin: 4px 0; font-size: 0.85rem; opacity: 0.9; }
        .controls-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 12px; margin: 15px 0; }
        .control-item { background: #f8f9fa; padding: 12px; border-radius: 8px; border-left: 3px solid #667eea; text-align: center; }
        .control-item .button { background: #667eea; color: white; padding: 6px 12px; border-radius: 6px; font-weight: bold; font-size: 0.9rem; display: block; margin: 0 auto 6px; width: fit-content; }
        .control-item p { color: #555; font-size: 0.8rem; line-height: 1.3; }
        .tray-menu { background: #f8f9fa; padding: 15px; border-radius: 10px; margin: 15px 0; }
        .tray-menu ul { list-style: none; padding: 0; }
        .tray-menu li { margin: 8px 0; padding: 6px 0; border-bottom: 1px solid #eee; }
        .tray-colors { display: flex; gap: 10px; margin: 15px 0; flex-wrap: wrap; }
        .tray-color { flex: 1; min-width: 120px; background: #f8f9fa; padding: 10px; border-radius: 8px; text-align: center; border-top: 3px solid; font-size: 0.85rem; }
        .tray-color.red { border-top-color: #ff4444; }
        .tray-color.orange { border-top-color: #ff8800; }
        .tray-color.green { border-top-color: #00cc66; }
        .tray-color.gray { border-top-color: #888888; }
        .troubleshooting-item { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 8px; margin: 12px 0; }
        .troubleshooting-item h4 { color: #856404; margin-bottom: 8px; font-size: 1rem; }
        .tip-box { background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); padding: 15px; border-radius: 10px; margin: 15px 0; border-left: 4px solid #00d2d3; }
        .faq-item { margin-bottom: 15px; }
        .faq-item h4 { color: #667eea; font-size: 1rem; margin-bottom: 6px; }
        ul, ol { padding-left: 18px; }
        li { margin: 4px 0; }
        p { margin: 8px 0; font-size: 0.95rem; }
        .icon { font-size: 1.2rem; }
        @media (max-width: 600px) {
            .notification-types { flex-direction: column; }
            .controls-grid { grid-template-columns: repeat(2, 1fr); }
            .tray-colors { flex-direction: column; }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>üìã Planfix Reminder</h1>
            <p class="subtitle">–ë—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</p>
        </header>

        <main class="main-content">
            <section class="section">
                <h2><span class="icon">üéØ</span>–û –ø—Ä–æ–≥—Ä–∞–º–º–µ</h2>
                <p>–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö –∏–∑ Planfix. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö.</p>
            </section>

            <section class="section">
                <h2><span class="icon">üîî</span>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>
                <div class="notification-types">
                    <div class="notification-card overdue">
                        <h3>üî¥ –ü–†–û–°–†–û–ß–ï–ù–ù–´–ï</h3>
                        <p>–°—Ä–æ–∫ –ø—Ä–æ—à–µ–ª</p>
                        <p>–ì—Ä–æ–º–∫–∏–π —Å–∏–≥–Ω–∞–ª</p>
                        <p>–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω</p>
                    </div>
                    <div class="notification-card urgent">
                        <h3>üü° –°–†–û–ß–ù–´–ï</h3>
                        <p>–î–æ —Å—Ä–æ–∫–∞ < 1 –¥–Ω—è</p>
                        <p>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</p>
                        <p>–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω</p>
                    </div>
                    <div class="notification-card current">
                        <h3>üìã –û–ë–´–ß–ù–´–ï</h3>
                        <p>–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</p>
                        <p>–ë–µ–∑ –∑–≤—É–∫–∞</p>
                        <p>–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω</p>
                    </div>
                </div>
            </section>

            <section class="section">
                <h2><span class="icon">üéÆ</span>–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
                <div class="controls-grid">
                    <div class="control-item">
                        <div class="button">–û—Ç–∫—Ä—ã—Ç—å</div>
                        <p>–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ</p>
                    </div>
                    <div class="control-item">
                        <div class="button">15–º–∏–Ω</div>
                        <p>–ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ</p>
                    </div>
                    <div class="control-item">
                        <div class="button">1—á</div>
                        <p>–ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å</p>
                    </div>
                    <div class="control-item">
                        <div class="button">–ì–æ—Ç–æ–≤–æ</div>
                        <p>–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å</p>
                    </div>
                    <div class="control-item">
                        <div class="button">‚úï</div>
                        <p>–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ</p>
                    </div>
                    <div class="control-item">
                        <div class="button">üìå</div>
                        <p>–ó–∞–∫—Ä–µ–ø–∏—Ç—å –æ–∫–Ω–æ</p>
                    </div>
                </div>

                <div class="tip-box">
                    <h3>üí° –°–æ–≤–µ—Ç</h3>
                    <p>–û–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –º—ã—à—å—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.</p>
                </div>
            </section>

            <section class="section">
                <h2><span class="icon">üìä</span>–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π</h2>
                <p>–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –∏–∫–æ–Ω–∫—É –≤–æ–∑–ª–µ —á–∞—Å–æ–≤. –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é:</p>
                <div class="tray-menu">
                    <ul>
                        <li><strong>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å</strong> - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</li>
                        <li><strong>–ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å / –¥–æ –∑–∞–≤—Ç—Ä–∞</strong> - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å</li>
                        <li><strong>–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å</strong> - –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</li>
                        <li><strong>–û—Ç–∫—Ä—ã—Ç—å Planfix</strong> - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</li>
                        <li><strong>–°–ø—Ä–∞–≤–∫–∞</strong> - –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ</li>
                        <li><strong>–í—ã—Ö–æ–¥</strong> - –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É</li>
                    </ul>
                </div>

                <h3>–¶–≤–µ—Ç –∏–∫–æ–Ω–∫–∏:</h3>
                <div class="tray-colors">
                    <div class="tray-color red">üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</div>
                    <div class="tray-color orange">üü† –°—Ä–æ—á–Ω–æ</div>
                    <div class="tray-color green">üü¢ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ</div>
                    <div class="tray-color gray">‚ö´ –ù–∞ –ø–∞—É–∑–µ</div>
                </div>
            </section>

            <section class="section">
                <h2><span class="icon">‚öôÔ∏è</span>–ù–∞—Å—Ç—Ä–æ–π–∫–∞</h2>
                <p>–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Planfix –Ω—É–∂–Ω—ã API –∫–ª—é—á –∏ –∞–¥—Ä–µ—Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª–µ config.ini —Ä—è–¥–æ–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.</p>
                
                <h3>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</h3>
                <div class="tray-menu">
                    <ul>
                        <li><strong>check_interval</strong> - –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–∞–¥–∞—á–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 = 5 –º–∏–Ω—É—Ç)</li>
                        <li><strong>notify_overdue</strong> - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (true/false)</li>
                        <li><strong>notify_urgent</strong> - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ (true/false)</li>
                        <li><strong>notify_current</strong> - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ (true/false)</li>
                        <li><strong>max_total_windows</strong> - –º–∞–∫—Å–∏–º—É–º –æ–∫–æ–Ω –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)</li>
                        <li><strong>max_windows_per_category</strong> - –º–∞–∫—Å–∏–º—É–º –æ–∫–æ–Ω –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)</li>
                    </ul>
                </div>
            </section>

            <section class="section">
                <h2><span class="icon">üîß</span>–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º</h2>
                
                <div class="troubleshooting-item">
                    <h4>‚ùå –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h4>
                    <ul>
                        <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ - –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞?</li>
                        <li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å"</li>
                        <li>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏</li>
                    </ul>
                </div>

                <div class="troubleshooting-item">
                    <h4>üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h4>
                    <ul>
                        <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
                        <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–∑ –º–µ–Ω—é —Ç—Ä–µ—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ IT-–ø–æ–¥–¥–µ—Ä–∂–∫—É</li>
                        <li>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ IT-–ø–æ–¥–¥–µ—Ä–∂–∫—É</li>
                    </ul>
                </div>

                <div class="troubleshooting-item">
                    <h4>‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è</h4>
                    <ul>
                        <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config.ini</li>
                        <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</li>
                        <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–∑ –º–µ–Ω—é —Ç—Ä–µ—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ IT-–ø–æ–¥–¥–µ—Ä–∂–∫—É</li>
                        <li>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ IT-–ø–æ–¥–¥–µ—Ä–∂–∫—É</li>
                    </ul>
                </div>
            </section>

            <section class="section">
                <h2><span class="icon">‚ùì</span>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h2>
                
                <div class="faq-item">
                    <h4>–ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π?</h4>
                    <p>–î–∞, –≤ —Ñ–∞–π–ª–µ config.ini –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.</p>
                </div>

                <div class="faq-item">
                    <h4>–ë—É–¥–µ—Ç –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ —è –∑–∞–∫—Ä–æ—é –≤—Å–µ –æ–∫–Ω–∞?</h4>
                    <p>–î–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å–µ –æ–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç—ã.</p>
                </div>

                <div class="faq-item">
                    <h4>–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á?</h4>
                    <p>–î–∞, –≤ config.ini –º–æ–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–∏—Ö, —Å—Ä–æ—á–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.</p>
                </div>

                <div class="faq-item">
                    <h4>–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ?</h4>
                    <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–∞—É–∑–∞" –≤ –º–µ–Ω—é —Ç—Ä–µ—è –∏–ª–∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.</p>
                </div>
            </section>
        </main>
    </div>
</body>
</html>"""

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π HTML —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(
                mode="w", suffix=".html", delete=False, encoding="utf-8"
            ) as f:
                f.write(help_html)
                temp_file_path = f.name

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            webbrowser.open(f"file://{temp_file_path}")

            success("–°–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ", "UI")
            info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ø—Ä–∞–≤–∫–∏: {temp_file_path}", "UI")

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø—Ä–∞–≤–∫–∏: {e}", "UI", exc_info=True)

    def _handle_diagnostic(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            debug("–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã", "UI")

            if not DIAGNOSTIC_AVAILABLE:
                error("–ú–æ–¥—É–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "UI")
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
            def run_diagnostic_thread():
                try:
                    info("–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ", "UI")
                    summary = run_diagnostic()
                    if summary:
                        success("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "UI")
                    else:
                        warning("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏", "UI")
                except Exception as e:
                    error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}", "UI", exc_info=True)

            import threading
            diagnostic_thread = threading.Thread(target=run_diagnostic_thread, daemon=True)
            diagnostic_thread.start()

            success("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ", "UI")

        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}", "UI", exc_info=True)

    def _handle_quit(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞"""
        try:
            debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '–í—ã—Ö–æ–¥'", "UI")
            if self.on_quit:
                self.on_quit()
            else:
                warning("Callback –¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "UI")
        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞: {e}", "UI", exc_info=True)

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–π"""
        try:
            info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è", "UI")
            if self.tray_icon:
                self.tray_icon.stop()
                success("–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "UI")
        except Exception as e:
            error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è: {e}", "UI", exc_info=True)


# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–£–õ–Ø =====


def test_toast_notification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    from file_logger import setup_logging, get_logs_directory, startup

    setup_logging(debug_mode=True, console_debug=True)

    startup("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ñ–∞–π–ª–æ–≤—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")

    def on_open_task(task_id: str):
        info(f"–¢–µ—Å—Ç: –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É #{task_id}", "TEST")

    def on_close_notification(task_id: str, reason: str):
        info(f"–¢–µ—Å—Ç: –ó–∞–∫—Ä—ã—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{task_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}", "TEST")

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    info("=== –°–û–ó–î–ê–ù–ò–ï –ú–ï–ù–ï–î–ñ–ï–†–ê ===", "TEST")
    manager = ToastManager()
    manager.on_open_task = on_open_task
    manager.on_close_notification = on_close_notification
    success("ToastManager —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "TEST")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    info("=== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===", "TEST")

    manager.show_notification(
        title="üî¥ –ü–†–û–°–†–û–ß–ï–ù–û: –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
        message="üìÖ 01.12.2024\nüë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        category="overdue",
        task_id="123",
    )

    manager.show_notification(
        title="üü° –°–†–û–ß–ù–û: –î—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞",
        message="üìÖ –°–µ–≥–æ–¥–Ω—è\nüë§ –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        category="urgent",
        task_id="456",
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Å–∫–∞–¥–∞
    for i in range(3, 8):
        manager.show_notification(
            title=f"üìã –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ {i}",
            message=f"üìÖ –ó–∞–¥–∞—á–∞ –Ω–æ–º–µ—Ä {i}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}",
            category="current",
            task_id=str(100 + i),
        )

    success("–°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 7", "TEST")
    info("–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π", "TEST")
    info("–ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞", "TEST")

    startup(f"–õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {get_logs_directory()}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º GUI
    manager.run()


if __name__ == "__main__":
    test_toast_notification()
