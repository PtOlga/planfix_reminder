#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
"""

import tkinter as tk
from tkinter import ttk
import threading
import queue
import webbrowser
import datetime
from typing import Optional, Dict, Any, Callable
import pystray
from PIL import Image, ImageDraw
try:
    import winsound
except ImportError:
    winsound = None

class ToastNotification:
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    
    def __init__(self, title: str, message: str, category: str, task_id: Optional[str] = None):
        self.title = title
        self.message = message
        self.category = category
        self.task_id = task_id
        self.root = None
        self.is_closed = False
        self.drag_data = {"x": 0, "y": 0}
        
        # Callback —Ñ—É–Ω–∫—Ü–∏–∏ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –∏–∑–≤–Ω–µ)
        self.on_open_task: Optional[Callable[[str], None]] = None
        self.on_snooze: Optional[Callable[[str, str], None]] = None
        self.on_close: Optional[Callable[[str, str], None]] = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.styles = {
            'overdue': {
                'bg_color': '#FF4444',
                'text_color': 'white',
                'border_color': '#CC0000',
                'sound': True,
                'sound_type': 'critical'
            },
            'urgent': {
                'bg_color': '#FF8800',
                'text_color': 'white',
                'border_color': '#CC4400',
                'sound': True,
                'sound_type': 'warning'
            },
            'current': {
                'bg_color': '#0066CC',
                'text_color': 'white',
                'border_color': '#003388',
                'sound': False,
                'sound_type': None
            }
        }
    
    def create_window(self, master_root: tk.Tk, position: tuple = None):
        """–°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.root = tk.Toplevel(master_root)
        self.root.withdraw()
        
        self.root.overrideredirect(True)
        self.root.attributes('-topmost', True)
        self.root.attributes('-alpha', 0.95)
        
        style = self.styles.get(self.category, self.styles['current'])
        
        window_width = 320
        window_height = 140
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if position:
            x, y = position
        else:
            x, y = self._calculate_position(window_width, window_height)
        
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self._create_ui(style)
        
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
        if style['sound']:
            threading.Thread(target=self._play_sound, args=(style['sound_type'],), daemon=True).start()
        
        self.root.deiconify()
        self._animate_in()
    
    def _create_ui(self, style: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = tk.Frame(
            self.root,
            bg=style['border_color'],
            relief='raised',
            bd=2
        )
        container.pack(fill='both', expand=True, padx=2, pady=2)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω–∞—è –ø–∞–Ω–µ–ª—å
        title_bar = tk.Frame(container, bg=style['bg_color'], height=25)
        title_bar.pack(fill='x', padx=1, pady=(1, 0))
        title_bar.pack_propagate(False)
        
        # –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_icon = {
            'overdue': 'üî¥',
            'urgent': 'üü°',
            'current': 'üìã'
        }.get(self.category, 'üìã')
        
        icon_label = tk.Label(
            title_bar,
            text=category_icon,
            font=('Arial', 10),
            fg=style['text_color'],
            bg=style['bg_color']
        )
        icon_label.pack(side='left', padx=(5, 0), pady=2)
        
        # ID –∑–∞–¥–∞—á–∏
        if self.task_id:
            task_id_label = tk.Label(
                title_bar,
                text=f"#{self.task_id}",
                font=('Arial', 8),
                fg=style['text_color'],
                bg=style['bg_color']
            )
            task_id_label.pack(side='left', padx=(5, 0), pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self._create_control_buttons(title_bar, style)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
        self._bind_dragging(title_bar, icon_label)
        
        # –û–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_frame = tk.Frame(container, bg=style['bg_color'], padx=8, pady=5)
        content_frame.pack(fill='both', expand=True, padx=1, pady=(0, 1))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏
        task_title = self.title.split(': ', 1)[-1] if ': ' in self.title else self.title
        title_label = tk.Label(
            content_frame,
            text=task_title,
            font=('Arial', 9, 'bold'),
            fg=style['text_color'],
            bg=style['bg_color'],
            wraplength=280,
            justify='left',
            anchor='w'
        )
        title_label.pack(fill='x', pady=(0, 3))
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        message_lines = self.message.split('\n')[:2]
        message_text = '\n'.join(message_lines)
        
        info_label = tk.Label(
            content_frame,
            text=message_text,
            font=('Arial', 7),
            fg=style['text_color'],
            bg=style['bg_color'],
            wraplength=280,
            justify='left',
            anchor='w'
        )
        info_label.pack(fill='x', pady=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self._create_action_buttons(content_frame, style)
    
    def _create_control_buttons(self, parent: tk.Frame, style: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫–Ω–æ–º"""
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = tk.Button(
            parent,
            text="‚úï",
            font=('Arial', 8, 'bold'),
            command=lambda: self._handle_close('manual'),
            bg=style['text_color'],
            fg=style['bg_color'],
            relief='flat',
            width=2,
            height=1
        )
        close_btn.pack(side='right', padx=(0, 5), pady=2)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        pin_btn = tk.Button(
            parent,
            text="üìå",
            font=('Arial', 6),
            command=self._toggle_pin,
            bg=style['text_color'],
            fg=style['bg_color'],
            relief='flat',
            width=2,
            height=1
        )
        pin_btn.pack(side='right', padx=(0, 2), pady=2)
    
    def _create_action_buttons(self, parent: tk.Frame, style: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        button_frame = tk.Frame(parent, bg=style['bg_color'])
        button_frame.pack(fill='x')
        
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å"
        if self.task_id:
            open_btn = tk.Button(
                button_frame,
                text="–û—Ç–∫—Ä—ã—Ç—å",
                font=('Arial', 7),
                command=self._handle_open_task,
                bg='white',
                fg='black',
                relief='flat',
                padx=6,
                pady=1
            )
            open_btn.pack(side='left', padx=(0, 3))
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á
        if self.category in ['overdue', 'urgent']:
            snooze_btn = tk.Button(
                button_frame,
                text="15–º–∏–Ω",
                font=('Arial', 7),
                command=lambda: self._handle_close('snooze_15min'),
                bg='lightgray',
                fg='black',
                relief='flat',
                padx=6,
                pady=1
            )
            snooze_btn.pack(side='left', padx=(0, 3))
        
        # –ö–Ω–æ–ø–∫–∞ "1 —á–∞—Å"
        hour_btn = tk.Button(
            button_frame,
            text="1—á",
            font=('Arial', 7),
            command=lambda: self._handle_close('snooze_1hour'),
            bg='lightyellow',
            fg='black',
            relief='flat',
            padx=6,
            pady=1
        )
        hour_btn.pack(side='left', padx=(0, 3))
        
        # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
        done_btn = tk.Button(
            button_frame,
            text="–ì–æ—Ç–æ–≤–æ",
            font=('Arial', 7),
            command=lambda: self._handle_close('done'),
            bg='lightgreen',
            fg='black',
            relief='flat',
            padx=6,
            pady=1
        )
        done_btn.pack(side='right')
    
    def _bind_dragging(self, *widgets):
        """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫ –≤–∏–¥–∂–µ—Ç–∞–º"""
        for widget in widgets:
            widget.bind("<Button-1>", self._start_drag)
            widget.bind("<B1-Motion>", self._on_drag)
    
    def _calculate_position(self, width: int, height: int) -> tuple:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        x = screen_width - width - 20
        y = 20
        
        return x, y
    
    def _start_drag(self, event):
        """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        self.drag_data["x"] = event.x_root - self.root.winfo_x()
        self.drag_data["y"] = event.y_root - self.root.winfo_y()
    
    def _on_drag(self, event):
        """–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        x = event.x_root - self.drag_data["x"]
        y = event.y_root - self.drag_data["y"]
        self.root.geometry(f"+{x}+{y}")
    
    def _toggle_pin(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–∫–Ω–∞"""
        current_topmost = self.root.attributes('-topmost')
        self.root.attributes('-topmost', not current_topmost)
    
    def _animate_in(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–∫–Ω–∞"""
        alpha = 0.0
        def fade_in():
            nonlocal alpha
            if self.root and not self.is_closed:
                alpha += 0.15
                if alpha <= 0.95:
                    try:
                        self.root.attributes('-alpha', alpha)
                        self.root.after(40, fade_in)
                    except tk.TclError:
                        pass
        fade_in()
    
    def _play_sound(self, sound_type: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª"""
        if not winsound:
            return
        
        try:
            if sound_type == 'critical':
                for _ in range(3):
                    winsound.MessageBeep(winsound.MB_ICONHAND)
                    threading.Event().wait(0.3)
            elif sound_type == 'warning':
                winsound.MessageBeep(winsound.MB_ICONEXCLAMATION)
        except Exception:
            pass
    
    def _handle_open_task(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏"""
        if self.on_open_task and self.task_id:
            self.on_open_task(self.task_id)
    
    def _handle_close(self, reason: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if self.on_close and self.task_id:
            self.on_close(self.task_id, reason)
        
        self.is_closed = True
        if self.root:
            try:
                self.root.destroy()
            except tk.TclError:
                pass

class ToastManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.withdraw()
        self.root.title("Planfix Reminder")
        
        # –û—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_queue = queue.Queue()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.active_notifications = []
        
        # Callback —Ñ—É–Ω–∫—Ü–∏–∏
        self.on_open_task: Optional[Callable[[str], None]] = None
        self.on_close_notification: Optional[Callable[[str, str], None]] = None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
        self._check_queue()
    
    def _check_queue(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            while True:
                toast_data = self.notification_queue.get_nowait()
                self._create_toast(toast_data)
        except queue.Empty:
            pass
        
        # –û—á–∏—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        self.cleanup_notifications()
        
        self.root.after(100, self._check_queue)
    
    def _create_toast(self, toast_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        toast = ToastNotification(
            title=toast_data['title'],
            message=toast_data['message'],
            category=toast_data['category'],
            task_id=toast_data.get('task_id')
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback —Ñ—É–Ω–∫—Ü–∏–∏
        toast.on_open_task = self.on_open_task
        toast.on_close = self.on_close_notification
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        position = self._calculate_toast_position()
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        toast.create_window(self.root, position)
        self.active_notifications.append(toast)
    
    def _calculate_toast_position(self) -> tuple:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        window_width = 320
        window_height = 140
        
        # –û—Ç—Å—Ç—É–ø—ã –æ—Ç –∫—Ä–∞–µ–≤ —ç–∫—Ä–∞–Ω–∞
        margin_right = 20
        margin_top = 20
        margin_bottom = 60  # –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        start_x = screen_width - window_width - margin_right
        start_y = margin_top
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω –≤ —Å—Ç–æ–ª–±—Ü–µ
        available_height = screen_height - margin_top - margin_bottom
        max_windows_in_column = max(1, available_height // (window_height + 10))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        active_count = len(self.active_notifications)
        
        # –ö–∞—Å–∫–∞–¥–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ
        if active_count < max_windows_in_column:
            # –ü—Ä–æ—Å—Ç–æ–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –æ–∫–æ–Ω
            x = start_x
            y = start_y + (active_count * (window_height + 10))
        else:
            # –ï—Å–ª–∏ –æ–∫–æ–Ω –º–Ω–æ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å–∫–∞–¥–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
            cascade_offset_x = 25  # –°–º–µ—â–µ–Ω–∏–µ –ø–æ X –¥–ª—è –∫–∞—Å–∫–∞–¥–∞
            cascade_offset_y = 15  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –ø–æ Y
            
            # –ù–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –∏ –ø–æ–∑–∏—Ü–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ
            column = active_count // max_windows_in_column
            position_in_column = active_count % max_windows_in_column
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å –∫–∞—Å–∫–∞–¥–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
            x = start_x - (column * cascade_offset_x)
            y = start_y + (position_in_column * (window_height + 10)) + (column * cascade_offset_y)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –æ–∫–Ω–æ –∑–∞ –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É —ç–∫—Ä–∞–Ω–∞
            if x < 50:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥
                column = 0
                x = start_x
                y = start_y + (position_in_column * (window_height + 10))
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü —ç–∫—Ä–∞–Ω–∞  
        x = max(50, min(x, screen_width - window_width - 20))
        y = max(margin_top, min(y, screen_height - window_height - margin_bottom))
        
        return x, y
    
    def cleanup_notifications(self):
        """–û—á–∏—â–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö"""
        # –£–±–∏—Ä–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        old_count = len(self.active_notifications)
        self.active_notifications = [n for n in self.active_notifications if not n.is_closed]
        new_count = len(self.active_notifications)
        
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∫–æ–Ω
        if old_count != new_count and new_count > 0:
            self._reposition_active_notifications()
    
    def _reposition_active_notifications(self):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        window_width = 320
        window_height = 140
        margin_right = 20
        margin_top = 20
        margin_bottom = 60
        
        start_x = screen_width - window_width - margin_right
        start_y = margin_top
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for i, notification in enumerate(self.active_notifications):
            if notification.root and not notification.is_closed:
                try:
                    # –ö–∞—Å–∫–∞–¥–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º —Å–º–µ—â–µ–Ω–∏–µ–º
                    cascade_offset = min(i * 20, 100)  # –ú–∞–∫—Å–∏–º—É–º 100px —Å–º–µ—â–µ–Ω–∏—è
                    x = start_x - cascade_offset
                    y = start_y + (i * (window_height + 10))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
                    x = max(50, min(x, screen_width - window_width - 20))
                    y = max(margin_top, min(y, screen_height - window_height - margin_bottom))
                    
                    # –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –æ–∫–Ω–æ
                    notification.root.geometry(f"+{x}+{y}")
                except tk.TclError:
                    # –û–∫–Ω–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ
                    notification.is_closed = True
    
    def show_notification(self, title: str, message: str, category: str, task_id: Optional[str] = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        toast_data = {
            'title': title,
            'message': message,
            'category': category,
            'task_id': task_id
        }
        self.notification_queue.put(toast_data)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        self.root.mainloop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.root.quit()

class SystemTray:
    """–°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.tray_icon = None
        self.is_paused = False
        self.pause_until = None
        self.stats = {'total': 0, 'overdue': 0, 'urgent': 0}
        self.last_check_time = None
        
        # Callback —Ñ—É–Ω–∫—Ü–∏–∏
        self.on_check_now: Optional[Callable[[], None]] = None
        self.on_pause: Optional[Callable[[int], None]] = None
        self.on_resume: Optional[Callable[[], None]] = None
        self.on_quit: Optional[Callable[[], None]] = None
    
    def create_icon(self) -> Image.Image:
        """–°–æ–∑–¥–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç—Ä–µ—è"""
        image = Image.new('RGBA', (64, 64), (0, 0, 0, 0))
        draw = ImageDraw.Draw(image)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if self.is_paused:
            color = (128, 128, 128)  # –°–µ—Ä—ã–π - –Ω–∞ –ø–∞—É–∑–µ
        elif self.stats['overdue'] > 0:
            color = (255, 68, 68)    # –ö—Ä–∞—Å–Ω—ã–π - –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
        elif self.stats['urgent'] > 0:
            color = (255, 136, 0)    # –û—Ä–∞–Ω–∂–µ–≤—ã–π - –µ—Å—Ç—å —Å—Ä–æ—á–Ω—ã–µ
        else:
            color = (0, 200, 0)      # –ó–µ–ª–µ–Ω—ã–π - –≤—Å–µ —Ö–æ—Ä–æ—à–æ
        
        # –†–∏—Å—É–µ–º –∫—Ä—É–≥
        draw.ellipse([8, 8, 56, 56], fill=color, outline=(255, 255, 255), width=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É P
        draw.text((32, 32), "P", fill=(255, 255, 255), anchor="mm")
        
        return image
    
    def create_menu(self) -> pystray.Menu:
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ç—Ä–µ—è"""
        # –°—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if self.is_paused:
            if self.pause_until:
                pause_str = f"–ù–∞ –ø–∞—É–∑–µ –¥–æ {self.pause_until.strftime('%H:%M')}"
            else:
                pause_str = "–ù–∞ –ø–∞—É–∑–µ"
            status_item = pystray.MenuItem(f"‚è∏Ô∏è {pause_str}", None, enabled=False)
        else:
            total = self.stats['total']
            overdue = self.stats['overdue']
            status_item = pystray.MenuItem(f"üü¢ –ê–∫—Ç–∏–≤–µ–Ω ({total} –∑–∞–¥–∞—á, {overdue} –ø—Ä–æ—Å—Ä–æ—á.)", None, enabled=False)
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if self.last_check_time:
            time_str = self.last_check_time.strftime('%H:%M:%S')
            last_check_item = pystray.MenuItem(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {time_str}", None, enabled=False)
        else:
            last_check_item = pystray.MenuItem("–ï—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å", None, enabled=False)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        menu_items = [
            status_item,
            last_check_item,
            pystray.Menu.SEPARATOR,
            pystray.MenuItem("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", lambda: self._handle_check_now()),
        ]
        
        # –ü–∞—É–∑–∞ –∏–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not self.is_paused:
            menu_items.extend([
                pystray.MenuItem("‚è∏Ô∏è –ü–∞—É–∑–∞ –Ω–∞ 1 —á–∞—Å", lambda: self._handle_pause(60)),
                pystray.MenuItem("‚è∏Ô∏è –ü–∞—É–∑–∞ –¥–æ –∑–∞–≤—Ç—Ä–∞ 9:00", lambda: self._handle_pause_until_tomorrow()),
            ])
        else:
            menu_items.append(pystray.MenuItem("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", lambda: self._handle_resume()))
        
        menu_items.extend([
            pystray.Menu.SEPARATOR,
            pystray.MenuItem("üåê –û—Ç–∫—Ä—ã—Ç—å Planfix", lambda: self._handle_open_planfix()),
            pystray.MenuItem("üìñ –°–ø—Ä–∞–≤–∫–∞", lambda: self._handle_show_help()),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem("‚ùå –í—ã—Ö–æ–¥", lambda: self._handle_quit()),
        ])
        
        return pystray.Menu(*menu_items)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π"""
        self.tray_icon = pystray.Icon(
            name="Planfix Reminder",
            icon=self.create_icon(),
            title="Planfix Reminder",
            menu=self.create_menu()
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        def update_menu():
            while True:
                threading.Event().wait(30)
                if self.tray_icon:
                    self.tray_icon.menu = self.create_menu()
        
        threading.Thread(target=update_menu, daemon=True).start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.tray_icon.run, daemon=True).start()
    
    def update_stats(self, total: int, overdue: int, urgent: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stats = {'total': total, 'overdue': overdue, 'urgent': urgent}
        self.last_check_time = datetime.datetime.now()
        
        if self.tray_icon:
            self.tray_icon.icon = self.create_icon()
    
    def set_paused(self, paused: bool, until: Optional[datetime.datetime] = None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã"""
        self.is_paused = paused
        self.pause_until = until
        
        if self.tray_icon:
            self.tray_icon.icon = self.create_icon()
    
    def _handle_check_now(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–π—á–∞—Å"""
        if self.on_check_now:
            self.on_check_now()
    
    def _handle_pause(self, minutes: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã"""
        if self.on_pause:
            self.on_pause(minutes)
    
    def _handle_pause_until_tomorrow(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—É–∑—ã –¥–æ –∑–∞–≤—Ç—Ä–∞"""
        tomorrow = datetime.date.today() + datetime.timedelta(days=1)
        tomorrow_9am = datetime.datetime.combine(tomorrow, datetime.time(9, 0))
        
        minutes = int((tomorrow_9am - datetime.datetime.now()).total_seconds() / 60)
        if self.on_pause:
            self.on_pause(minutes)
    
    def _handle_resume(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.on_resume:
            self.on_resume()
    
    def _handle_open_planfix(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Planfix"""
        webbrowser.open("https://planfix.com")
    
    def _handle_show_help(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏"""
        # –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–∫–Ω–æ —Å–ø—Ä–∞–≤–∫–∏
        pass
    
    def _handle_quit(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞"""
        if self.on_quit:
            self.on_quit()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–µ–π"""
        if self.tray_icon:
            self.tray_icon.stop()

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–£–õ–Ø =====

def test_toast_notification():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 40)
    
    def on_open_task(task_id: str):
        print(f"üìñ –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É: {task_id}")
    
    def on_close_notification(task_id: str, reason: str):
        print(f"‚ùå –ó–∞–∫—Ä—ã—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {task_id}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = ToastManager()
    manager.on_open_task = on_open_task
    manager.on_close_notification = on_close_notification
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    manager.show_notification(
        title="üî¥ –ü–†–û–°–†–û–ß–ï–ù–û: –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
        message="üìÖ 01.12.2024\nüë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        category="overdue",
        task_id="123"
    )
    
    manager.show_notification(
        title="üü° –°–†–û–ß–ù–û: –î—Ä—É–≥–∞—è –∑–∞–¥–∞—á–∞",
        message="üìÖ –°–µ–≥–æ–¥–Ω—è\nüë§ –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        category="urgent",
        task_id="456"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Å–∫–∞–¥–∞
    for i in range(3, 8):
        manager.show_notification(
            title=f"üìã –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ {i}",
            message=f"üìÖ –ó–∞–¥–∞—á–∞ –Ω–æ–º–µ—Ä {i}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}",
            category="current",
            task_id=str(100 + i)
        )
    
    print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 7")
    print("üñ±Ô∏è –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Å–∫–∞–¥–∞")
    print("üí° –ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º GUI
    manager.run()

if __name__ == "__main__":
    test_toast_notification()